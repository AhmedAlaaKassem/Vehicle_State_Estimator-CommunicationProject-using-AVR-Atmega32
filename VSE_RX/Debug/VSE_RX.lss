
VSE_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000007c6  0000085a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800072  00800072  0000086c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017f4  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c42  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001314  00000000  00000000  00002ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  000041e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f0  00000000  00000000  00004560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012bd  00000000  00000000  00004e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000610d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_12>
  34:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 02 	call	0x588	; 0x588 <main>
  8a:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <VSE_dispatcher_KIT1>:
  static uint8_t volatile g_u8_Global_Speed=0;

  /* Looping for states of VSE */
  extern void VSE_dispatcher_KIT1(void)
  {
	  switch (u8_VSE_State_Machine)
  92:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <u8_VSE_State_Machine>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	21 f0       	breq	.+8      	; 0xa2 <VSE_dispatcher_KIT1+0x10>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	09 f4       	brne	.+2      	; 0xa0 <VSE_dispatcher_KIT1+0xe>
  9e:	44 c0       	rjmp	.+136    	; 0x128 <VSE_dispatcher_KIT1+0x96>
  a0:	08 95       	ret
	  {
		  case IDLE :  /* Do nothing */
		  break;
		  case RECEIVING_BYTE :		/* stay here ISR will change this state */
										/* Check for button 0 to increase speed */
										if(READ_BIT(PINB,0))
  a2:	b0 9b       	sbis	0x16, 0	; 22
  a4:	0e c0       	rjmp	.+28     	; 0xc2 <VSE_dispatcher_KIT1+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f e3       	ldi	r24, 0x3F	; 63
  a8:	9c e9       	ldi	r25, 0x9C	; 156
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <VSE_dispatcher_KIT1+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <VSE_dispatcher_KIT1+0x1e>
  b0:	00 00       	nop
										{
											_delay_ms(20);
											if(READ_BIT(PINB,0))
  b2:	b0 9b       	sbis	0x16, 0	; 22
  b4:	03 c0       	rjmp	.+6      	; 0xbc <VSE_dispatcher_KIT1+0x2a>
											{
												u8_VSE_State_Machine = RECEIVING_BYTE_COMPLETE;
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <u8_VSE_State_Machine>
											}
											while(READ_BIT(PINB,0));
  bc:	b0 99       	sbic	0x16, 0	; 22
  be:	fe cf       	rjmp	.-4      	; 0xbc <VSE_dispatcher_KIT1+0x2a>
  c0:	08 95       	ret
										}
										/* Check for button 1 decrease speed */
										else if(READ_BIT(PINC,4))
  c2:	9c 9b       	sbis	0x13, 4	; 19
  c4:	18 c0       	rjmp	.+48     	; 0xf6 <VSE_dispatcher_KIT1+0x64>
  c6:	8f e3       	ldi	r24, 0x3F	; 63
  c8:	9c e9       	ldi	r25, 0x9C	; 156
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <VSE_dispatcher_KIT1+0x38>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <VSE_dispatcher_KIT1+0x3e>
  d0:	00 00       	nop
										{
											_delay_ms(20);
											if(READ_BIT(PINC,4))
  d2:	9c 9b       	sbis	0x13, 4	; 19
  d4:	0d c0       	rjmp	.+26     	; 0xf0 <VSE_dispatcher_KIT1+0x5e>
											{
												if(g_u8_Global_Speed <= 254)
  d6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
  da:	8f 3f       	cpi	r24, 0xFF	; 255
  dc:	31 f0       	breq	.+12     	; 0xea <VSE_dispatcher_KIT1+0x58>
												{
													g_u8_Global_Speed+=1;
  de:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <VSE_dispatcher_KIT1+0x5e>
												}
												else
												{
													g_u8_Global_Speed=255;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
												}
											}
											while(READ_BIT(PINC,4));
  f0:	9c 99       	sbic	0x13, 4	; 19
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <VSE_dispatcher_KIT1+0x5e>
  f4:	08 95       	ret
										}
										else if(READ_BIT(PINB,2))
  f6:	b2 9b       	sbis	0x16, 2	; 22
  f8:	20 c0       	rjmp	.+64     	; 0x13a <VSE_dispatcher_KIT1+0xa8>
  fa:	8f e3       	ldi	r24, 0x3F	; 63
  fc:	9c e9       	ldi	r25, 0x9C	; 156
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <VSE_dispatcher_KIT1+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <VSE_dispatcher_KIT1+0x72>
 104:	00 00       	nop
										{
											_delay_ms(20);
											if(READ_BIT(PINB,2))
 106:	b2 9b       	sbis	0x16, 2	; 22
 108:	0c c0       	rjmp	.+24     	; 0x122 <VSE_dispatcher_KIT1+0x90>
											{
												if(g_u8_Global_Speed >= 1)
 10a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 10e:	88 23       	and	r24, r24
 110:	31 f0       	breq	.+12     	; 0x11e <VSE_dispatcher_KIT1+0x8c>
												{
													g_u8_Global_Speed-=1;
 112:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 116:	81 50       	subi	r24, 0x01	; 1
 118:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 11c:	02 c0       	rjmp	.+4      	; 0x122 <VSE_dispatcher_KIT1+0x90>
												}
												else
												{
													g_u8_Global_Speed=0;
 11e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
												}
											}
											while(READ_BIT(PINB,2));
 122:	b2 99       	sbic	0x16, 2	; 22
 124:	fe cf       	rjmp	.-4      	; 0x122 <VSE_dispatcher_KIT1+0x90>
 126:	08 95       	ret
										}

		  break;
		  case RECEIVING_BYTE_COMPLETE :/* SPI send data to the other KIT */
										SPI_Send_Byte(g_u8_Global_Speed);
 128:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 12c:	0e 94 a3 02 	call	0x546	; 0x546 <SPI_Send_Byte>
										Temp_Data=0;	/* clear Temp data for the next byte */
 130:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <Temp_Data>
										u8_VSE_State_Machine = RECEIVING_BYTE;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <u8_VSE_State_Machine>
 13a:	08 95       	ret

0000013c <g_VSE_TX_callback>:

    
/* Callback function run when ISR of UART TX fire */
extern void g_VSE_TX_callback(void)
{
	u8_UART_TX_Flag = 1;				     /* to indicate that byte already sent and ready to sent new one */
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 142:	08 95       	ret

00000144 <g_VSE_RX_callback>:


/* Callback function run when ISR of UART RX fire */
extern void g_VSE_RX_callback(void)
{	
	UART_Start_RecieveByte(&g_Received_Speed_PC1);
 144:	85 e7       	ldi	r24, 0x75	; 117
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 63 03 	call	0x6c6	; 0x6c6 <UART_Start_RecieveByte>
	PORTC ^= 0xff;
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	80 95       	com	r24
 150:	85 bb       	out	0x15, r24	; 21
	if(g_Received_Speed_PC1 == 13)
 152:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <g_Received_Speed_PC1>
 156:	8d 30       	cpi	r24, 0x0D	; 13
 158:	59 f4       	brne	.+22     	; 0x170 <g_VSE_RX_callback+0x2c>
	{	
		PORTA = Temp_Data;
 15a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Temp_Data>
 15e:	8b bb       	out	0x1b, r24	; 27
		g_u8_Global_Speed = Temp_Data ;
 160:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Temp_Data>
 164:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
		u8_VSE_State_Machine = RECEIVING_BYTE_COMPLETE;
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <u8_VSE_State_Machine>
 16e:	08 95       	ret
	}
	else if ((g_Received_Speed_PC1 != '\0')&&((g_Received_Speed_PC1 >= '0')||(g_Received_Speed_PC1 <= '9')))
 170:	88 23       	and	r24, r24
 172:	69 f0       	breq	.+26     	; 0x18e <g_VSE_RX_callback+0x4a>
	{
		Temp_Data = (Temp_Data * 10) + (g_Received_Speed_PC1-48);
 174:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <Temp_Data>
 178:	99 0f       	add	r25, r25
 17a:	29 2f       	mov	r18, r25
 17c:	22 0f       	add	r18, r18
 17e:	22 0f       	add	r18, r18
 180:	92 0f       	add	r25, r18
 182:	80 53       	subi	r24, 0x30	; 48
 184:	89 0f       	add	r24, r25
 186:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Temp_Data>
		g_Received_Speed_PC1 = '\0';
 18a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <g_Received_Speed_PC1>
 18e:	08 95       	ret

00000190 <__vector_10>:
	return retval;
 }

  /*___Timer0 COMP Interrupt___*/
  void __vector_10 (void)
  {
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	1f 92       	push	r1
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
	 uint8_t volatile u8_count =0;
 1ae:	19 82       	std	Y+1, r1	; 0x01
	 for( u8_count;u8_count< gu8_BufferCount ;u8_count++ )
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <gu8_BufferCount>
 1b8:	82 17       	cp	r24, r18
 1ba:	88 f4       	brcc	.+34     	; 0x1de <__vector_10+0x4e>
	 {
	    /* increase counter from every ISR */
		ga_Counter[u8_count]++;
 1bc:	e9 81       	ldd	r30, Y+1	; 0x01
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	ea 58       	subi	r30, 0x8A	; 138
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	80 81       	ld	r24, Z
 1ca:	91 81       	ldd	r25, Z+1	; 0x01
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	91 83       	std	Z+1, r25	; 0x01
 1d0:	80 83       	st	Z, r24

  /*___Timer0 COMP Interrupt___*/
  void __vector_10 (void)
  {
	 uint8_t volatile u8_count =0;
	 for( u8_count;u8_count< gu8_BufferCount ;u8_count++ )
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	89 83       	std	Y+1, r24	; 0x01
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	82 17       	cp	r24, r18
 1dc:	78 f3       	brcs	.-34     	; 0x1bc <__vector_10+0x2c>
	 {
	    /* increase counter from every ISR */
		ga_Counter[u8_count]++;
	 }
 1de:	0f 90       	pop	r0
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <Enable_GlobalInterrupt>:
void Enable_GlobalInterrupt(void)
{
	/*
	*	Enable global interrupt
	*/
	SET_BIT(SREG, GI);
 1f8:	8f b7       	in	r24, 0x3f	; 63
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	8f bf       	out	0x3f, r24	; 63
 1fe:	08 95       	ret

00000200 <DIO_Init_Pin>:
uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
	
	/* Check Bit in PORT A */
	if(( u8_Pin_Number >= A0 ) && ( u8_Pin_Number <=A7 ))
 200:	88 30       	cpi	r24, 0x08	; 8
 202:	08 f5       	brcc	.+66     	; 0x246 <DIO_Init_Pin+0x46>
	{
		if ( u8_Pin_State == OUT )
 204:	61 30       	cpi	r22, 0x01	; 1
 206:	71 f4       	brne	.+28     	; 0x224 <DIO_Init_Pin+0x24>
		{
			SET_BIT (DDRA,u8_Pin_Number);
 208:	4a b3       	in	r20, 0x1a	; 26
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	b9 01       	movw	r22, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_Init_Pin+0x16>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_Init_Pin+0x12>
 21a:	cb 01       	movw	r24, r22
 21c:	84 2b       	or	r24, r20
 21e:	8a bb       	out	0x1a, r24	; 26
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret
	{
		if ( u8_Pin_State == OUT )
		{
			SET_BIT (DDRA,u8_Pin_Number);
		}
			else if ( u8_Pin_State == IN  )
 224:	61 11       	cpse	r22, r1
 226:	7d c0       	rjmp	.+250    	; 0x322 <DIO_Init_Pin+0x122>
			{
				CLR_BIT(DDRA,u8_Pin_Number);
 228:	4a b3       	in	r20, 0x1a	; 26
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_Init_Pin+0x36>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_Init_Pin+0x32>
 23a:	cb 01       	movw	r24, r22
 23c:	80 95       	com	r24
 23e:	84 23       	and	r24, r20
 240:	8a bb       	out	0x1a, r24	; 26
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check Bit in PORT B */
	else if(( u8_Pin_Number >= B0 ) && ( u8_Pin_Number <=B7 ))
 246:	98 ef       	ldi	r25, 0xF8	; 248
 248:	98 0f       	add	r25, r24
 24a:	98 30       	cpi	r25, 0x08	; 8
 24c:	08 f5       	brcc	.+66     	; 0x290 <DIO_Init_Pin+0x90>
	{
		u8_Pin_Number -= AVR_PORT_BITS;
	
		if ( u8_Pin_State == OUT )
 24e:	61 30       	cpi	r22, 0x01	; 1
 250:	71 f4       	brne	.+28     	; 0x26e <DIO_Init_Pin+0x6e>
		{
			SET_BIT(DDRB,u8_Pin_Number);
 252:	47 b3       	in	r20, 0x17	; 23
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	b9 01       	movw	r22, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_Init_Pin+0x60>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	9a 95       	dec	r25
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_Init_Pin+0x5c>
 264:	cb 01       	movw	r24, r22
 266:	84 2b       	or	r24, r20
 268:	87 bb       	out	0x17, r24	; 23
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	08 95       	ret
	
		if ( u8_Pin_State == OUT )
		{
			SET_BIT(DDRB,u8_Pin_Number);
		}
			else if ( u8_Pin_State == IN  )
 26e:	61 11       	cpse	r22, r1
 270:	5a c0       	rjmp	.+180    	; 0x326 <DIO_Init_Pin+0x126>
			{
				CLR_BIT(DDRB,u8_Pin_Number);
 272:	47 b3       	in	r20, 0x17	; 23
 274:	21 e0       	ldi	r18, 0x01	; 1
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	b9 01       	movw	r22, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_Init_Pin+0x80>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	9a 95       	dec	r25
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_Init_Pin+0x7c>
 284:	cb 01       	movw	r24, r22
 286:	80 95       	com	r24
 288:	84 23       	and	r24, r20
 28a:	87 bb       	out	0x17, r24	; 23
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check Bit in PORT C */
	else if(( u8_Pin_Number >= C0 ) && ( u8_Pin_Number <=C7 ))
 290:	90 ef       	ldi	r25, 0xF0	; 240
 292:	98 0f       	add	r25, r24
 294:	98 30       	cpi	r25, 0x08	; 8
 296:	08 f5       	brcc	.+66     	; 0x2da <DIO_Init_Pin+0xda>
	{
		u8_Pin_Number -= AVR_PORT_BITS;
		u8_Pin_Number -= AVR_PORT_BITS;

		if ( u8_Pin_State == OUT )
 298:	61 30       	cpi	r22, 0x01	; 1
 29a:	71 f4       	brne	.+28     	; 0x2b8 <DIO_Init_Pin+0xb8>
		{
			SET_BIT(DDRC,u8_Pin_Number);
 29c:	44 b3       	in	r20, 0x14	; 20
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	b9 01       	movw	r22, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_Init_Pin+0xaa>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	9a 95       	dec	r25
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_Init_Pin+0xa6>
 2ae:	cb 01       	movw	r24, r22
 2b0:	84 2b       	or	r24, r20
 2b2:	84 bb       	out	0x14, r24	; 20
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret

		if ( u8_Pin_State == OUT )
		{
			SET_BIT(DDRC,u8_Pin_Number);
		}
			else if ( u8_Pin_State == IN  )
 2b8:	61 11       	cpse	r22, r1
 2ba:	37 c0       	rjmp	.+110    	; 0x32a <DIO_Init_Pin+0x12a>
			{
				CLR_BIT(DDRC,u8_Pin_Number);
 2bc:	44 b3       	in	r20, 0x14	; 20
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	b9 01       	movw	r22, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_Init_Pin+0xca>
 2c6:	66 0f       	add	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	9a 95       	dec	r25
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_Init_Pin+0xc6>
 2ce:	cb 01       	movw	r24, r22
 2d0:	80 95       	com	r24
 2d2:	84 23       	and	r24, r20
 2d4:	84 bb       	out	0x14, r24	; 20
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check Bit in PORT D */
	else if(( u8_Pin_Number >= D0 ) && ( u8_Pin_Number <=D7 ))
 2da:	88 51       	subi	r24, 0x18	; 24
 2dc:	88 30       	cpi	r24, 0x08	; 8
 2de:	38 f5       	brcc	.+78     	; 0x32e <DIO_Init_Pin+0x12e>
	{
		u8_Pin_Number -= AVR_PORT_BITS;
		u8_Pin_Number -= AVR_PORT_BITS;
		u8_Pin_Number -= AVR_PORT_BITS;

		if ( u8_Pin_State == OUT )
 2e0:	61 30       	cpi	r22, 0x01	; 1
 2e2:	71 f4       	brne	.+28     	; 0x300 <DIO_Init_Pin+0x100>
		{
			SET_BIT(DDRD,u8_Pin_Number);
 2e4:	41 b3       	in	r20, 0x11	; 17
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	b9 01       	movw	r22, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_Init_Pin+0xf2>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	8a 95       	dec	r24
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_Init_Pin+0xee>
 2f6:	cb 01       	movw	r24, r22
 2f8:	84 2b       	or	r24, r20
 2fa:	81 bb       	out	0x11, r24	; 17
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	08 95       	ret

		if ( u8_Pin_State == OUT )
		{
			SET_BIT(DDRD,u8_Pin_Number);
		}
			else if ( u8_Pin_State == IN  )
 300:	61 11       	cpse	r22, r1
 302:	17 c0       	rjmp	.+46     	; 0x332 <DIO_Init_Pin+0x132>
			{
				CLR_BIT(DDRD,u8_Pin_Number);
 304:	41 b3       	in	r20, 0x11	; 17
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	b9 01       	movw	r22, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_Init_Pin+0x112>
 30e:	66 0f       	add	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	8a 95       	dec	r24
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_Init_Pin+0x10e>
 316:	cb 01       	movw	r24, r22
 318:	80 95       	com	r24
 31a:	84 23       	and	r24, r20
 31c:	81 bb       	out	0x11, r24	; 17
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	08 95       	ret
			{
				CLR_BIT(DDRA,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	08 95       	ret
			{
				CLR_BIT(DDRB,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	08 95       	ret
			{
				CLR_BIT(DDRC,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	08 95       	ret
				}
	}
	/* ERROR Bit Number is wrong */
	else
	{
		retval = ERROR_NOK;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	08 95       	ret
			{
				CLR_BIT(DDRD,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 332:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		retval = ERROR_NOK;
	}
	return retval;	
}
 334:	08 95       	ret

00000336 <DIO_Init_Port>:
uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
	
	/* Check for PORT A */
	if( u8_Port_Number == PORT_A )
 336:	81 11       	cpse	r24, r1
 338:	0b c0       	rjmp	.+22     	; 0x350 <DIO_Init_Port+0x1a>
	{
		if( u8_Port_State == OUTPUTS )
 33a:	6f 3f       	cpi	r22, 0xFF	; 255
 33c:	21 f4       	brne	.+8      	; 0x346 <DIO_Init_Port+0x10>
		{
			DDRA = OUTPUTS;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	8a bb       	out	0x1a, r24	; 26
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret
	{
		if( u8_Port_State == OUTPUTS )
		{
			DDRA = OUTPUTS;
		}
			else if( u8_Port_State == INPUTS )
 346:	61 11       	cpse	r22, r1
 348:	2a c0       	rjmp	.+84     	; 0x39e <DIO_Init_Port+0x68>
			{
				DDRA = INPUTS;
 34a:	1a ba       	out	0x1a, r1	; 26
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check for PORT B */
	else if( u8_Port_Number == PORT_B )
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	59 f4       	brne	.+22     	; 0x36a <DIO_Init_Port+0x34>
	{
		if( u8_Port_State == OUTPUTS )
 354:	6f 3f       	cpi	r22, 0xFF	; 255
 356:	21 f4       	brne	.+8      	; 0x360 <DIO_Init_Port+0x2a>
		{
			DDRB = OUTPUTS;
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	87 bb       	out	0x17, r24	; 23
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
	{
		if( u8_Port_State == OUTPUTS )
		{
			DDRB = OUTPUTS;
		}
			else if( u8_Port_State == INPUTS )
 360:	61 11       	cpse	r22, r1
 362:	1f c0       	rjmp	.+62     	; 0x3a2 <DIO_Init_Port+0x6c>
			{
				DDRB = INPUTS;
 364:	17 ba       	out	0x17, r1	; 23
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check for PORT C */
	else if( u8_Port_Number == PORT_C )
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	59 f4       	brne	.+22     	; 0x384 <DIO_Init_Port+0x4e>
	{
		if( u8_Port_State == OUTPUTS )
 36e:	6f 3f       	cpi	r22, 0xFF	; 255
 370:	21 f4       	brne	.+8      	; 0x37a <DIO_Init_Port+0x44>
		{
			DDRC = OUTPUTS;
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	84 bb       	out	0x14, r24	; 20
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret
	{
		if( u8_Port_State == OUTPUTS )
		{
			DDRC = OUTPUTS;
		}
			else if( u8_Port_State == INPUTS )
 37a:	61 11       	cpse	r22, r1
 37c:	14 c0       	rjmp	.+40     	; 0x3a6 <DIO_Init_Port+0x70>
			{
				DDRC = INPUTS;
 37e:	14 ba       	out	0x14, r1	; 20
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	08 95       	ret
				{
				retval = ERROR_NOK;
				}
	}
	/* Check for PORT D */
	else if( u8_Port_Number == PORT_D )
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	89 f4       	brne	.+34     	; 0x3aa <DIO_Init_Port+0x74>
	{
		if( u8_Port_State == OUTPUTS )
 388:	6f 3f       	cpi	r22, 0xFF	; 255
 38a:	21 f4       	brne	.+8      	; 0x394 <DIO_Init_Port+0x5e>
		{
			DDRD = OUTPUTS;
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	81 bb       	out	0x11, r24	; 17
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret
	{
		if( u8_Port_State == OUTPUTS )
		{
			DDRD = OUTPUTS;
		}
			else if( u8_Port_State == INPUTS )
 394:	61 11       	cpse	r22, r1
 396:	0b c0       	rjmp	.+22     	; 0x3ae <DIO_Init_Port+0x78>
			{
				DDRD = INPUTS;
 398:	11 ba       	out	0x11, r1	; 17
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 95       	ret
			{
				DDRA = INPUTS;
			}
				else 
				{
					retval = ERROR_NOK;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	08 95       	ret
			{
				DDRB = INPUTS;
			}
				else 
				{
					retval = ERROR_NOK;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	08 95       	ret
			{
				DDRC = INPUTS;
			}
				else 
				{
				retval = ERROR_NOK;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	08 95       	ret
				}
	}
	/* Error PORT input */
	else
	{
		retval = ERROR_NOK;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	08 95       	ret
			{
				DDRD = INPUTS;
			}
				else 
				{
					retval = ERROR_NOK;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		retval = ERROR_NOK;
	}
	return retval;
}
 3b0:	08 95       	ret

000003b2 <SPI_Init>:
	else 
	{
		retval = ERROR_INTERRUPT_POLLING;		/* Wrong SPI Not Interrupt or Polling  */
	}
	return retval;
}
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	ec 01       	movw	r28, r24
 3b8:	88 81       	ld	r24, Y
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <SPI_Init+0xe>
 3be:	78 c0       	rjmp	.+240    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 3c0:	6c 9a       	sbi	0x0d, 4	; 13
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	8c e0       	ldi	r24, 0x0C	; 12
 3c6:	0e 94 00 01 	call	0x200	; 0x200 <DIO_Init_Pin>
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	8d e0       	ldi	r24, 0x0D	; 13
 3ce:	0e 94 00 01 	call	0x200	; 0x200 <DIO_Init_Pin>
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	8e e0       	ldi	r24, 0x0E	; 14
 3d6:	0e 94 00 01 	call	0x200	; 0x200 <DIO_Init_Pin>
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	8f e0       	ldi	r24, 0x0F	; 15
 3de:	0e 94 00 01 	call	0x200	; 0x200 <DIO_Init_Pin>
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	81 11       	cpse	r24, r1
 3e6:	1a c0       	rjmp	.+52     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3e8:	70 98       	cbi	0x0e, 0	; 14
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	51 f0       	breq	.+20     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f0:	28 f0       	brcs	.+10     	; 0x3fc <SPI_Init+0x4a>
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	59 f0       	breq	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f6:	83 30       	cpi	r24, 0x03	; 3
 3f8:	69 f0       	breq	.+26     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3fa:	26 c0       	rjmp	.+76     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3fc:	68 98       	cbi	0x0d, 0	; 13
 3fe:	69 98       	cbi	0x0d, 1	; 13
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	27 c0       	rjmp	.+78     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 404:	68 9a       	sbi	0x0d, 0	; 13
 406:	69 98       	cbi	0x0d, 1	; 13
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	23 c0       	rjmp	.+70     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 40c:	68 98       	cbi	0x0d, 0	; 13
 40e:	69 9a       	sbi	0x0d, 1	; 13
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	1f c0       	rjmp	.+62     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 414:	68 9a       	sbi	0x0d, 0	; 13
 416:	69 9a       	sbi	0x0d, 1	; 13
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	1b c0       	rjmp	.+54     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	b1 f4       	brne	.+44     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 420:	70 9a       	sbi	0x0e, 0	; 14
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	41 f0       	breq	.+16     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 428:	18 f0       	brcs	.+6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	49 f0       	breq	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 42e:	10 c0       	rjmp	.+32     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 430:	68 98       	cbi	0x0d, 0	; 13
 432:	69 98       	cbi	0x0d, 1	; 13
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0d c0       	rjmp	.+26     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 438:	68 9a       	sbi	0x0d, 0	; 13
 43a:	69 98       	cbi	0x0d, 1	; 13
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	09 c0       	rjmp	.+18     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 440:	68 98       	cbi	0x0d, 0	; 13
 442:	69 9a       	sbi	0x0d, 1	; 13
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	05 c0       	rjmp	.+10     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 448:	8e ef       	ldi	r24, 0xFE	; 254
 44a:	03 c0       	rjmp	.+6      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	01 c0       	rjmp	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 450:	8e ef       	ldi	r24, 0xFE	; 254
 452:	9b 81       	ldd	r25, Y+3	; 0x03
 454:	91 30       	cpi	r25, 0x01	; 1
 456:	41 f4       	brne	.+16     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 458:	6f 9a       	sbi	0x0d, 7	; 13
 45a:	9f b7       	in	r25, 0x3f	; 63
 45c:	90 68       	ori	r25, 0x80	; 128
 45e:	9f bf       	out	0x3f, r25	; 63
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <gu8_Interrupt_Polling_Mode>
 466:	06 c0       	rjmp	.+12     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 468:	91 11       	cpse	r25, r1
 46a:	03 c0       	rjmp	.+6      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 46c:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <gu8_Interrupt_Polling_Mode>
 470:	01 c0       	rjmp	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	8c ef       	ldi	r24, 0xFC	; 252
 474:	9d 81       	ldd	r25, Y+5	; 0x05
 476:	91 11       	cpse	r25, r1
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	6d 98       	cbi	0x0d, 5	; 13
 47c:	05 c0       	rjmp	.+10     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 47e:	91 30       	cpi	r25, 0x01	; 1
 480:	11 f4       	brne	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 482:	6d 9a       	sbi	0x0d, 5	; 13
 484:	01 c0       	rjmp	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 486:	8b ef       	ldi	r24, 0xFB	; 251
 488:	9e 81       	ldd	r25, Y+6	; 0x06
 48a:	91 11       	cpse	r25, r1
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48e:	6b 98       	cbi	0x0d, 3	; 13
 490:	05 c0       	rjmp	.+10     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 492:	91 30       	cpi	r25, 0x01	; 1
 494:	11 f4       	brne	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 496:	6b 9a       	sbi	0x0d, 3	; 13
 498:	01 c0       	rjmp	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 49a:	8a ef       	ldi	r24, 0xFA	; 250
 49c:	9c 81       	ldd	r25, Y+4	; 0x04
 49e:	91 11       	cpse	r25, r1
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	6a 98       	cbi	0x0d, 2	; 13
 4a4:	4c c0       	rjmp	.+152    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 4a6:	91 30       	cpi	r25, 0x01	; 1
 4a8:	09 f0       	breq	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4aa:	44 c0       	rjmp	.+136    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 4ac:	6a 9a       	sbi	0x0d, 2	; 13
 4ae:	47 c0       	rjmp	.+142    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 4b0:	81 11       	cpse	r24, r1
 4b2:	42 c0       	rjmp	.+132    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 4b4:	6c 98       	cbi	0x0d, 4	; 13
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	8c e0       	ldi	r24, 0x0C	; 12
 4ba:	0e 94 00 01 	call	0x200	; 0x200 <DIO_Init_Pin>
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	8d e0       	ldi	r24, 0x0D	; 13
 4c2:	0e 94 00 01 	call	0x200	; 0x200 <DIO_Init_Pin>
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	8e e0       	ldi	r24, 0x0E	; 14
 4ca:	0e 94 00 01 	call	0x200	; 0x200 <DIO_Init_Pin>
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	8f e0       	ldi	r24, 0x0F	; 15
 4d2:	0e 94 00 01 	call	0x200	; 0x200 <DIO_Init_Pin>
 4d6:	8b 81       	ldd	r24, Y+3	; 0x03
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	49 f4       	brne	.+18     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4dc:	6f 9a       	sbi	0x0d, 7	; 13
 4de:	8f b7       	in	r24, 0x3f	; 63
 4e0:	80 68       	ori	r24, 0x80	; 128
 4e2:	8f bf       	out	0x3f, r24	; 63
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <gu8_Interrupt_Polling_Mode>
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	06 c0       	rjmp	.+12     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4ee:	81 11       	cpse	r24, r1
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f2:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <gu8_Interrupt_Polling_Mode>
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f8:	8c ef       	ldi	r24, 0xFC	; 252
 4fa:	9d 81       	ldd	r25, Y+5	; 0x05
 4fc:	91 11       	cpse	r25, r1
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 500:	6d 98       	cbi	0x0d, 5	; 13
 502:	05 c0       	rjmp	.+10     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 504:	91 30       	cpi	r25, 0x01	; 1
 506:	11 f4       	brne	.+4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 508:	6d 9a       	sbi	0x0d, 5	; 13
 50a:	01 c0       	rjmp	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 50c:	8b ef       	ldi	r24, 0xFB	; 251
 50e:	9e 81       	ldd	r25, Y+6	; 0x06
 510:	91 11       	cpse	r25, r1
 512:	02 c0       	rjmp	.+4      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 514:	6b 98       	cbi	0x0d, 3	; 13
 516:	05 c0       	rjmp	.+10     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 518:	91 30       	cpi	r25, 0x01	; 1
 51a:	11 f4       	brne	.+4      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 51c:	6b 9a       	sbi	0x0d, 3	; 13
 51e:	01 c0       	rjmp	.+2      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 520:	8a ef       	ldi	r24, 0xFA	; 250
 522:	9c 81       	ldd	r25, Y+4	; 0x04
 524:	91 11       	cpse	r25, r1
 526:	02 c0       	rjmp	.+4      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 528:	6a 98       	cbi	0x0d, 2	; 13
 52a:	09 c0       	rjmp	.+18     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 52c:	91 30       	cpi	r25, 0x01	; 1
 52e:	31 f4       	brne	.+12     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 530:	6a 9a       	sbi	0x0d, 2	; 13
 532:	05 c0       	rjmp	.+10     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 534:	89 ef       	ldi	r24, 0xF9	; 249
 536:	03 c0       	rjmp	.+6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 538:	8d ef       	ldi	r24, 0xFD	; 253
 53a:	01 c0       	rjmp	.+2      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 53c:	89 ef       	ldi	r24, 0xF9	; 249
 53e:	6e 9a       	sbi	0x0d, 6	; 13
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <SPI_Send_Byte>:
 546:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gu8_Interrupt_Polling_Mode>
 54a:	91 30       	cpi	r25, 0x01	; 1
 54c:	29 f4       	brne	.+10     	; 0x558 <SPI_Send_Byte+0x12>
 54e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <gu8_Data_SentFlag>
 552:	8f b9       	out	0x0f, r24	; 15
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	08 95       	ret
 558:	91 11       	cpse	r25, r1
 55a:	05 c0       	rjmp	.+10     	; 0x566 <SPI_Send_Byte+0x20>
 55c:	8f b9       	out	0x0f, r24	; 15
 55e:	77 9b       	sbis	0x0e, 7	; 14
 560:	fe cf       	rjmp	.-4      	; 0x55e <SPI_Send_Byte+0x18>
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 95       	ret
 566:	8c ef       	ldi	r24, 0xFC	; 252
 568:	08 95       	ret

0000056a <__vector_12>:

/* ISR of SPI */
void __vector_12(void)
{
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	8f 93       	push	r24
	gu8_Data_SentFlag = 1;    /* Set the Global variable to ensure of ISR data sent successfully. */
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gu8_Data_SentFlag>
}
 57c:	8f 91       	pop	r24
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <main>:


 int main ()
 {
	
	 DIO_Init_Port(PORT_A,OUTPUTS);
 588:	6f ef       	ldi	r22, 0xFF	; 255
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_Init_Port>
	 DIO_Init_Port(PORT_C,OUTPUTS);
 590:	6f ef       	ldi	r22, 0xFF	; 255
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_Init_Port>
	 DIO_Init_Pin(C4,IN);
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	84 e1       	ldi	r24, 0x14	; 20
 59c:	0e 94 00 01 	call	0x200	; 0x200 <DIO_Init_Pin>
	 DIO_Init_Pin(B2,IN);
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	8a e0       	ldi	r24, 0x0A	; 10
 5a4:	0e 94 00 01 	call	0x200	; 0x200 <DIO_Init_Pin>
	 DIO_Init_Pin(B0,IN);
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	88 e0       	ldi	r24, 0x08	; 8
 5ac:	0e 94 00 01 	call	0x200	; 0x200 <DIO_Init_Pin>
	 UART_Init(&obj_UART);						/* Init UART */
 5b0:	89 e6       	ldi	r24, 0x69	; 105
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <UART_Init>
	 SPI_Init(&SPI_TX);							/* Init SPI */
 5b8:	82 e6       	ldi	r24, 0x62	; 98
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <SPI_Init>
	 Set_Call_Back_UART_TX(g_VSE_TX_callback);	 /* set the function that will run when UART TX ISR fire */
 5c0:	8e e9       	ldi	r24, 0x9E	; 158
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <Set_Call_Back_UART_TX>
	 Set_Call_Back_UART_RX(g_VSE_RX_callback);   /* set the function that will run when UART RX ISR fire */
 5c8:	82 ea       	ldi	r24, 0xA2	; 162
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 85 03 	call	0x70a	; 0x70a <Set_Call_Back_UART_RX>
	 
	 while (1)
	 {
		VSE_dispatcher_KIT1();			       	/* Looping for states */
 5d0:	0e 94 49 00 	call	0x92	; 0x92 <VSE_dispatcher_KIT1>
 5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <main+0x48>

000005d6 <UART_Init>:
		/* Handling of entering wrong Mode */
		au8_DET = E_INTERRUPT_MODE ;
	}

	return au8_DET;
}
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <UART_Init+0xa>
 5de:	6f c0       	rjmp	.+222    	; 0x6be <UART_Init+0xe8>
 5e0:	ec 01       	movw	r28, r24
 5e2:	88 81       	ld	r24, Y
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	49 f4       	brne	.+18     	; 0x5fa <UART_Init+0x24>
 5e8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Enable_GlobalInterrupt>
 5ec:	57 9a       	sbi	0x0a, 7	; 10
 5ee:	56 9a       	sbi	0x0a, 6	; 10
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <u8_UART_InterruptMode>
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	09 c0       	rjmp	.+18     	; 0x60c <UART_Init+0x36>
 5fa:	81 11       	cpse	r24, r1
 5fc:	06 c0       	rjmp	.+12     	; 0x60a <UART_Init+0x34>
 5fe:	57 98       	cbi	0x0a, 7	; 10
 600:	56 98       	cbi	0x0a, 6	; 10
 602:	55 98       	cbi	0x0a, 5	; 10
 604:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <u8_UART_InterruptMode>
 608:	01 c0       	rjmp	.+2      	; 0x60c <UART_Init+0x36>
 60a:	84 e0       	ldi	r24, 0x04	; 4
 60c:	90 b5       	in	r25, 0x20	; 32
 60e:	90 68       	ori	r25, 0x80	; 128
 610:	90 bd       	out	0x20, r25	; 32
 612:	99 81       	ldd	r25, Y+1	; 0x01
 614:	91 11       	cpse	r25, r1
 616:	0b c0       	rjmp	.+22     	; 0x62e <UART_Init+0x58>
 618:	90 b5       	in	r25, 0x20	; 32
 61a:	9f 7b       	andi	r25, 0xBF	; 191
 61c:	90 bd       	out	0x20, r25	; 32
 61e:	2a 81       	ldd	r18, Y+2	; 0x02
 620:	3b 81       	ldd	r19, Y+3	; 0x03
 622:	23 33       	cpi	r18, 0x33	; 51
 624:	31 05       	cpc	r19, r1
 626:	49 f4       	brne	.+18     	; 0x63a <UART_Init+0x64>
 628:	93 e3       	ldi	r25, 0x33	; 51
 62a:	99 b9       	out	0x09, r25	; 9
 62c:	09 c0       	rjmp	.+18     	; 0x640 <UART_Init+0x6a>
 62e:	91 30       	cpi	r25, 0x01	; 1
 630:	31 f4       	brne	.+12     	; 0x63e <UART_Init+0x68>
 632:	90 b5       	in	r25, 0x20	; 32
 634:	90 64       	ori	r25, 0x40	; 64
 636:	90 bd       	out	0x20, r25	; 32
 638:	03 c0       	rjmp	.+6      	; 0x640 <UART_Init+0x6a>
 63a:	82 e0       	ldi	r24, 0x02	; 2
 63c:	01 c0       	rjmp	.+2      	; 0x640 <UART_Init+0x6a>
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	9d 81       	ldd	r25, Y+5	; 0x05
 642:	91 11       	cpse	r25, r1
 644:	07 c0       	rjmp	.+14     	; 0x654 <UART_Init+0x7e>
 646:	90 b5       	in	r25, 0x20	; 32
 648:	9f 7d       	andi	r25, 0xDF	; 223
 64a:	90 bd       	out	0x20, r25	; 32
 64c:	90 b5       	in	r25, 0x20	; 32
 64e:	9f 7e       	andi	r25, 0xEF	; 239
 650:	90 bd       	out	0x20, r25	; 32
 652:	01 c0       	rjmp	.+2      	; 0x656 <UART_Init+0x80>
 654:	86 e0       	ldi	r24, 0x06	; 6
 656:	9e 81       	ldd	r25, Y+6	; 0x06
 658:	91 11       	cpse	r25, r1
 65a:	04 c0       	rjmp	.+8      	; 0x664 <UART_Init+0x8e>
 65c:	90 b5       	in	r25, 0x20	; 32
 65e:	97 7f       	andi	r25, 0xF7	; 247
 660:	90 bd       	out	0x20, r25	; 32
 662:	07 c0       	rjmp	.+14     	; 0x672 <UART_Init+0x9c>
 664:	91 30       	cpi	r25, 0x01	; 1
 666:	21 f4       	brne	.+8      	; 0x670 <UART_Init+0x9a>
 668:	90 b5       	in	r25, 0x20	; 32
 66a:	98 60       	ori	r25, 0x08	; 8
 66c:	90 bd       	out	0x20, r25	; 32
 66e:	01 c0       	rjmp	.+2      	; 0x672 <UART_Init+0x9c>
 670:	87 e0       	ldi	r24, 0x07	; 7
 672:	9c 81       	ldd	r25, Y+4	; 0x04
 674:	91 11       	cpse	r25, r1
 676:	04 c0       	rjmp	.+8      	; 0x680 <UART_Init+0xaa>
 678:	90 b5       	in	r25, 0x20	; 32
 67a:	90 bd       	out	0x20, r25	; 32
 67c:	52 98       	cbi	0x0a, 2	; 10
 67e:	1c c0       	rjmp	.+56     	; 0x6b8 <UART_Init+0xe2>
 680:	92 30       	cpi	r25, 0x02	; 2
 682:	29 f4       	brne	.+10     	; 0x68e <UART_Init+0xb8>
 684:	90 b5       	in	r25, 0x20	; 32
 686:	92 60       	ori	r25, 0x02	; 2
 688:	90 bd       	out	0x20, r25	; 32
 68a:	52 98       	cbi	0x0a, 2	; 10
 68c:	15 c0       	rjmp	.+42     	; 0x6b8 <UART_Init+0xe2>
 68e:	94 30       	cpi	r25, 0x04	; 4
 690:	29 f4       	brne	.+10     	; 0x69c <UART_Init+0xc6>
 692:	90 b5       	in	r25, 0x20	; 32
 694:	94 60       	ori	r25, 0x04	; 4
 696:	90 bd       	out	0x20, r25	; 32
 698:	52 98       	cbi	0x0a, 2	; 10
 69a:	0e c0       	rjmp	.+28     	; 0x6b8 <UART_Init+0xe2>
 69c:	96 30       	cpi	r25, 0x06	; 6
 69e:	21 f4       	brne	.+8      	; 0x6a8 <UART_Init+0xd2>
 6a0:	90 b5       	in	r25, 0x20	; 32
 6a2:	96 68       	ori	r25, 0x86	; 134
 6a4:	90 bd       	out	0x20, r25	; 32
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <UART_Init+0xe2>
 6a8:	97 30       	cpi	r25, 0x07	; 7
 6aa:	29 f4       	brne	.+10     	; 0x6b6 <UART_Init+0xe0>
 6ac:	90 b5       	in	r25, 0x20	; 32
 6ae:	96 60       	ori	r25, 0x06	; 6
 6b0:	90 bd       	out	0x20, r25	; 32
 6b2:	52 9a       	sbi	0x0a, 2	; 10
 6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <UART_Init+0xe2>
 6b6:	83 e0       	ldi	r24, 0x03	; 3
 6b8:	54 9a       	sbi	0x0a, 4	; 10
 6ba:	53 9a       	sbi	0x0a, 3	; 10
 6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <UART_Init+0xea>
 6be:	85 e0       	ldi	r24, 0x05	; 5
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <UART_Start_RecieveByte>:
{
	/*
	 *	Development Error Tracer
	 */
	uint8_t au8_DET = ERROR_OK ;
	if(NULL != au8_RXbyatCpy)
 6c6:	00 97       	sbiw	r24, 0x00	; 0
 6c8:	91 f0       	breq	.+36     	; 0x6ee <UART_Start_RecieveByte+0x28>
	{
		if(POLLING == u8_UART_InterruptMode)
 6ca:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <u8_UART_InterruptMode>
 6ce:	21 11       	cpse	r18, r1
 6d0:	07 c0       	rjmp	.+14     	; 0x6e0 <UART_Start_RecieveByte+0x1a>
		{
			while(GET_BIT(UCSRA, RXC) == NULL);
 6d2:	5f 9b       	sbis	0x0b, 7	; 11
 6d4:	fe cf       	rjmp	.-4      	; 0x6d2 <UART_Start_RecieveByte+0xc>
			*au8_RXbyatCpy = UDR;
 6d6:	2c b1       	in	r18, 0x0c	; 12
 6d8:	fc 01       	movw	r30, r24
 6da:	20 83       	st	Z, r18
uint8_t UART_Start_RecieveByte(uint8_t * au8_RXbyatCpy)
{
	/*
	 *	Development Error Tracer
	 */
	uint8_t au8_DET = ERROR_OK ;
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	08 95       	ret
		if(POLLING == u8_UART_InterruptMode)
		{
			while(GET_BIT(UCSRA, RXC) == NULL);
			*au8_RXbyatCpy = UDR;
		}
		else if(INTERRUPT == u8_UART_InterruptMode)
 6e0:	21 30       	cpi	r18, 0x01	; 1
 6e2:	39 f4       	brne	.+14     	; 0x6f2 <UART_Start_RecieveByte+0x2c>
		{
				*au8_RXbyatCpy = UDR;
 6e4:	2c b1       	in	r18, 0x0c	; 12
 6e6:	fc 01       	movw	r30, r24
 6e8:	20 83       	st	Z, r18
uint8_t UART_Start_RecieveByte(uint8_t * au8_RXbyatCpy)
{
	/*
	 *	Development Error Tracer
	 */
	uint8_t au8_DET = ERROR_OK ;
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	08 95       	ret
		}
	}
	else
	{
		/* Handling of entering null pointer*/
		au8_DET = E_PTR_IS_NULL ;
 6ee:	85 e0       	ldi	r24, 0x05	; 5
 6f0:	08 95       	ret
				*au8_RXbyatCpy = UDR;
		}
		else
		{
			/* Handling of entering wrong Mode */
			au8_DET = E_INTERRUPT_MODE ;
 6f2:	84 e0       	ldi	r24, 0x04	; 4
		au8_DET = E_PTR_IS_NULL ;
	}

	return au8_DET;

}
 6f4:	08 95       	ret

000006f6 <Set_Call_Back_UART_TX>:

/* Global UART TX set callback function */
uint8_t Set_Call_Back_UART_TX(void (*App)(void))
{
	uint8_t retval = ERROR_OK;
	if( App != NULL_PTR )
 6f6:	00 97       	sbiw	r24, 0x00	; 0
 6f8:	31 f0       	breq	.+12     	; 0x706 <Set_Call_Back_UART_TX+0x10>
	{
		callBack_tx = App;
 6fa:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <callBack_tx+0x1>
 6fe:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <callBack_tx>


/* Global UART TX set callback function */
uint8_t Set_Call_Back_UART_TX(void (*App)(void))
{
	uint8_t retval = ERROR_OK;
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	08 95       	ret
	{
		callBack_tx = App;
	}
	else
	{
		retval = E_PTR_IS_NULL ;
 706:	85 e0       	ldi	r24, 0x05	; 5
	}
	return retval;
}
 708:	08 95       	ret

0000070a <Set_Call_Back_UART_RX>:

/* Global UART RX set callback function */
uint8_t Set_Call_Back_UART_RX(void (*App)(void))
{
	uint8_t retval = ERROR_OK;
	if( App != NULL_PTR )
 70a:	00 97       	sbiw	r24, 0x00	; 0
 70c:	31 f0       	breq	.+12     	; 0x71a <Set_Call_Back_UART_RX+0x10>
	{
		callBack_rx = App;
 70e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <callBack_rx+0x1>
 712:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <callBack_rx>
}

/* Global UART RX set callback function */
uint8_t Set_Call_Back_UART_RX(void (*App)(void))
{
	uint8_t retval = ERROR_OK;
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	08 95       	ret
	{
		callBack_rx = App;
	}
	else
	{
		retval = E_PTR_IS_NULL ;
 71a:	85 e0       	ldi	r24, 0x05	; 5
	}
	return retval;
}
 71c:	08 95       	ret

0000071e <__vector_13>:


 ISR(USART_RXC_vect)
 {
 71e:	1f 92       	push	r1
 720:	0f 92       	push	r0
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	0f 92       	push	r0
 726:	11 24       	eor	r1, r1
 728:	2f 93       	push	r18
 72a:	3f 93       	push	r19
 72c:	4f 93       	push	r20
 72e:	5f 93       	push	r21
 730:	6f 93       	push	r22
 732:	7f 93       	push	r23
 734:	8f 93       	push	r24
 736:	9f 93       	push	r25
 738:	af 93       	push	r26
 73a:	bf 93       	push	r27
 73c:	ef 93       	push	r30
 73e:	ff 93       	push	r31
 	if(callBack_rx != NULL_PTR)
 740:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <callBack_rx>
 744:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <callBack_rx+0x1>
 748:	30 97       	sbiw	r30, 0x00	; 0
 74a:	09 f0       	breq	.+2      	; 0x74e <__vector_13+0x30>
 	{
	 	callBack_rx();
 74c:	09 95       	icall
 	}
 }
 74e:	ff 91       	pop	r31
 750:	ef 91       	pop	r30
 752:	bf 91       	pop	r27
 754:	af 91       	pop	r26
 756:	9f 91       	pop	r25
 758:	8f 91       	pop	r24
 75a:	7f 91       	pop	r23
 75c:	6f 91       	pop	r22
 75e:	5f 91       	pop	r21
 760:	4f 91       	pop	r20
 762:	3f 91       	pop	r19
 764:	2f 91       	pop	r18
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__vector_15>:


 ISR(USART_TXC_vect)
 {
 770:	1f 92       	push	r1
 772:	0f 92       	push	r0
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	0f 92       	push	r0
 778:	11 24       	eor	r1, r1
 77a:	2f 93       	push	r18
 77c:	3f 93       	push	r19
 77e:	4f 93       	push	r20
 780:	5f 93       	push	r21
 782:	6f 93       	push	r22
 784:	7f 93       	push	r23
 786:	8f 93       	push	r24
 788:	9f 93       	push	r25
 78a:	af 93       	push	r26
 78c:	bf 93       	push	r27
 78e:	ef 93       	push	r30
 790:	ff 93       	push	r31
	if(callBack_tx != NULL_PTR)
 792:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <callBack_tx>
 796:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <callBack_tx+0x1>
 79a:	30 97       	sbiw	r30, 0x00	; 0
 79c:	09 f0       	breq	.+2      	; 0x7a0 <__vector_15+0x30>
	{
		callBack_tx();
 79e:	09 95       	icall
	}

 7a0:	ff 91       	pop	r31
 7a2:	ef 91       	pop	r30
 7a4:	bf 91       	pop	r27
 7a6:	af 91       	pop	r26
 7a8:	9f 91       	pop	r25
 7aa:	8f 91       	pop	r24
 7ac:	7f 91       	pop	r23
 7ae:	6f 91       	pop	r22
 7b0:	5f 91       	pop	r21
 7b2:	4f 91       	pop	r20
 7b4:	3f 91       	pop	r19
 7b6:	2f 91       	pop	r18
 7b8:	0f 90       	pop	r0
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	0f 90       	pop	r0
 7be:	1f 90       	pop	r1
 7c0:	18 95       	reti

000007c2 <_exit>:
 7c2:	f8 94       	cli

000007c4 <__stop_program>:
 7c4:	ff cf       	rjmp	.-2      	; 0x7c4 <__stop_program>
