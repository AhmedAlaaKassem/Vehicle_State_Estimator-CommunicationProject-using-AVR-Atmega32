
VSE_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000bca  00000c5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800074  00800074  00000c72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018b3  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cda  00000000  00000000  0000277b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ee  00000000  00000000  00003455  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00004844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091c  00000000  00000000  00004c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013f9  00000000  00000000  0000557c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006975  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_10>
  2c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_11>
  30:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__vector_12>
  34:	0c 94 47 04 	jmp	0x88e	; 0x88e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 38       	cpi	r26, 0x8D	; 141
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 03 	call	0x734	; 0x734 <main>
  8a:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <VSE_dispatcher_KIT2>:
static uint8_t volatile u8_VSE_State_Machine = RECEIVING_BYTE ;	
static volatile uint32_t OVF_counter=0;


extern void VSE_dispatcher_KIT2(void)
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
	switch (u8_VSE_State_Machine)
  9a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  9e:	82 30       	cpi	r24, 0x02	; 2
  a0:	99 f1       	breq	.+102    	; 0x108 <VSE_dispatcher_KIT2+0x76>
  a2:	83 30       	cpi	r24, 0x03	; 3
  a4:	b9 f1       	breq	.+110    	; 0x114 <VSE_dispatcher_KIT2+0x82>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	09 f0       	breq	.+2      	; 0xac <VSE_dispatcher_KIT2+0x1a>
  aa:	8b c0       	rjmp	.+278    	; 0x1c2 <VSE_dispatcher_KIT2+0x130>
	{
		case IDLE :
		break;
		case RECEIVING_BYTE :
								if(READ_BIT(PINC,4))
  ac:	9c 9b       	sbis	0x13, 4	; 19
  ae:	1c c0       	rjmp	.+56     	; 0xe8 <VSE_dispatcher_KIT2+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	8f e3       	ldi	r24, 0x3F	; 63
  b2:	9c e9       	ldi	r25, 0x9C	; 156
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <VSE_dispatcher_KIT2+0x22>
  b8:	00 c0       	rjmp	.+0      	; 0xba <VSE_dispatcher_KIT2+0x28>
  ba:	00 00       	nop
								{
									_delay_ms(20);
									if(READ_BIT(PINC,4))
  bc:	9c 9b       	sbis	0x13, 4	; 19
  be:	11 c0       	rjmp	.+34     	; 0xe2 <VSE_dispatcher_KIT2+0x50>
									{
										DIO_Write_Pin(B0,HIGH);
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <DIO_Write_Pin>
  c8:	9f ef       	ldi	r25, 0xFF	; 255
  ca:	20 e7       	ldi	r18, 0x70	; 112
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	91 50       	subi	r25, 0x01	; 1
  d0:	20 40       	sbci	r18, 0x00	; 0
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <VSE_dispatcher_KIT2+0x3c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <VSE_dispatcher_KIT2+0x46>
  d8:	00 00       	nop
										_delay_ms(100);
										DIO_Write_Pin(B0,LOW);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	88 e0       	ldi	r24, 0x08	; 8
  de:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <DIO_Write_Pin>
									}
									while(READ_BIT(PINC,4));
  e2:	9c 99       	sbic	0x13, 4	; 19
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <VSE_dispatcher_KIT2+0x50>
  e6:	6d c0       	rjmp	.+218    	; 0x1c2 <VSE_dispatcher_KIT2+0x130>
								}
								else if(READ_BIT(PINB,2))
  e8:	b2 9b       	sbis	0x16, 2	; 22
  ea:	6b c0       	rjmp	.+214    	; 0x1c2 <VSE_dispatcher_KIT2+0x130>
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9c e9       	ldi	r25, 0x9C	; 156
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <VSE_dispatcher_KIT2+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <VSE_dispatcher_KIT2+0x64>
  f6:	00 00       	nop
								{
									_delay_ms(20);
									if(READ_BIT(PINB,2))
  f8:	b2 9b       	sbis	0x16, 2	; 22
  fa:	03 c0       	rjmp	.+6      	; 0x102 <VSE_dispatcher_KIT2+0x70>
									{
										u8_VSE_State_Machine = VSE_SEND_UART;
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
									}
									while(READ_BIT(PINB,2));
 102:	b2 99       	sbic	0x16, 2	; 22
 104:	fe cf       	rjmp	.-4      	; 0x102 <VSE_dispatcher_KIT2+0x70>
 106:	5d c0       	rjmp	.+186    	; 0x1c2 <VSE_dispatcher_KIT2+0x130>
								}
		break;
		case VSE_READ_SPI :				/* Start Timer count */
										
										TIMER_vidInit();
 108:	0e 94 99 04 	call	0x932	; 0x932 <TIMER_vidInit>
										u8_VSE_State_Machine = RECEIVING_BYTE;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		break;
 112:	57 c0       	rjmp	.+174    	; 0x1c2 <VSE_dispatcher_KIT2+0x130>
		case VSE_SEND_UART :		    /* restart timer */
										
										/* calculatee the distance time * OPA */ 
										f_Distance = (float32_t) ((TCNT0 + (OVF_counter* 256))*(float32_t)((float32_t)1024/F_CPU));
 114:	22 b7       	in	r18, 0x32	; 50
 116:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 11a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 11e:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <__data_end+0x2>
 122:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <__data_end+0x3>
 126:	ba 2f       	mov	r27, r26
 128:	a9 2f       	mov	r26, r25
 12a:	98 2f       	mov	r25, r24
 12c:	88 27       	eor	r24, r24
 12e:	bc 01       	movw	r22, r24
 130:	cd 01       	movw	r24, r26
 132:	62 0f       	add	r22, r18
 134:	71 1d       	adc	r23, r1
 136:	81 1d       	adc	r24, r1
 138:	91 1d       	adc	r25, r1
 13a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__floatunsisf>
 13e:	2d eb       	ldi	r18, 0xBD	; 189
 140:	37 e3       	ldi	r19, 0x37	; 55
 142:	46 e0       	ldi	r20, 0x06	; 6
 144:	59 e3       	ldi	r21, 0x39	; 57
 146:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__mulsf3>
 14a:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <f_Distance>
 14e:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <f_Distance+0x1>
 152:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <f_Distance+0x2>
 156:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <f_Distance+0x3>
										f_Distance *= (float32_t)OPA;
 15a:	c0 90 78 00 	lds	r12, 0x0078	; 0x800078 <f_Distance>
 15e:	d0 90 79 00 	lds	r13, 0x0079	; 0x800079 <f_Distance+0x1>
 162:	e0 90 7a 00 	lds	r14, 0x007A	; 0x80007a <f_Distance+0x2>
 166:	f0 90 7b 00 	lds	r15, 0x007B	; 0x80007b <f_Distance+0x3>
 16a:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <OPA>
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__floatunsisf>
 178:	a7 01       	movw	r20, r14
 17a:	96 01       	movw	r18, r12
 17c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__mulsf3>
 180:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <f_Distance>
 184:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <f_Distance+0x1>
 188:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <f_Distance+0x2>
 18c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <f_Distance+0x3>
										UART_Send_Byte((uint8_t)f_Distance);      /* send data to PC by UART */
 190:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <f_Distance>
 194:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <f_Distance+0x1>
 198:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <f_Distance+0x2>
 19c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <f_Distance+0x3>
 1a0:	0e 94 b9 04 	call	0x972	; 0x972 <__fixunssfsi>
 1a4:	86 2f       	mov	r24, r22
 1a6:	0e 94 2d 04 	call	0x85a	; 0x85a <UART_Send_Byte>

										TCNT0=0;
 1aa:	12 be       	out	0x32, r1	; 50
										OVF_counter=0;
 1ac:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
 1b0:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
 1b4:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end+0x2>
 1b8:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <__data_end+0x3>
										u8_VSE_State_Machine = RECEIVING_BYTE;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		break;
		default:
		break;
	}
}
 1c2:	ff 90       	pop	r15
 1c4:	ef 90       	pop	r14
 1c6:	df 90       	pop	r13
 1c8:	cf 90       	pop	r12
 1ca:	08 95       	ret

000001cc <g_VSE_TX_callbackSPI>:

/* call back function ISR OF SPI */
void g_VSE_TX_callbackSPI(void)
{
	SPI_Receive_Byte(&OPA);
 1cc:	8c e7       	ldi	r24, 0x7C	; 124
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 4f 03 	call	0x69e	; 0x69e <SPI_Receive_Byte>
	u8_VSE_State_Machine = VSE_READ_SPI;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 1da:	08 95       	ret

000001dc <g_VSE_TX_callback>:
}

/* Callback function run when ISR of UART TX fire */
extern void g_VSE_TX_callback(void)
{
	u8_UART_TX_Flag = 1;				     /* to indicate that byte already sent and ready to sent new one */
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_UART_TX_Flag>
 1e2:	08 95       	ret

000001e4 <__vector_11>:
}

	
ISR(TIMER0_OVF_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
	OVF_counter ++;
 1f6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1fa:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 1fe:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <__data_end+0x2>
 202:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <__data_end+0x3>
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	a1 1d       	adc	r26, r1
 20a:	b1 1d       	adc	r27, r1
 20c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
 210:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 214:	a0 93 76 00 	sts	0x0076, r26	; 0x800076 <__data_end+0x2>
 218:	b0 93 77 00 	sts	0x0077, r27	; 0x800077 <__data_end+0x3>

 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_10>:
	 return retval;
 }

 /*___Timer0 COMP Interrupt___*/
 void __vector_10 (void)
 {
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	1f 92       	push	r1
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
	 uint8_t volatile u8_count =0;
 24c:	19 82       	std	Y+1, r1	; 0x01
	 for( u8_count;u8_count< gu8_BufferCount ;u8_count++ )
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <gu8_BufferCount>
 256:	82 17       	cp	r24, r18
 258:	88 f4       	brcc	.+34     	; 0x27c <__vector_10+0x4e>
	 {
		 /* increase counter from every ISR */
		 ga_Counter[u8_count]++;
 25a:	e9 81       	ldd	r30, Y+1	; 0x01
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	ee 0f       	add	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	e3 58       	subi	r30, 0x83	; 131
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	80 81       	ld	r24, Z
 268:	91 81       	ldd	r25, Z+1	; 0x01
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	91 83       	std	Z+1, r25	; 0x01
 26e:	80 83       	st	Z, r24

 /*___Timer0 COMP Interrupt___*/
 void __vector_10 (void)
 {
	 uint8_t volatile u8_count =0;
	 for( u8_count;u8_count< gu8_BufferCount ;u8_count++ )
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	82 17       	cp	r24, r18
 27a:	78 f3       	brcs	.-34     	; 0x25a <__vector_10+0x2c>
	 {
		 /* increase counter from every ISR */
		 ga_Counter[u8_count]++;
	 }
 27c:	0f 90       	pop	r0
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	2f 91       	pop	r18
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <Enable_GlobalInterrupt>:
void Enable_GlobalInterrupt(void)
{
	/*
	*	Enable global interrupt
	*/
	SET_BIT(SREG, GI);
 296:	8f b7       	in	r24, 0x3f	; 63
 298:	80 68       	ori	r24, 0x80	; 128
 29a:	8f bf       	out	0x3f, r24	; 63
 29c:	08 95       	ret

0000029e <DIO_Init_Pin>:
	else
	{
		retval = ERROR_NOK;
	}
	return retval;
}
 29e:	88 30       	cpi	r24, 0x08	; 8
 2a0:	08 f5       	brcc	.+66     	; 0x2e4 <DIO_Init_Pin+0x46>
 2a2:	61 30       	cpi	r22, 0x01	; 1
 2a4:	71 f4       	brne	.+28     	; 0x2c2 <DIO_Init_Pin+0x24>
 2a6:	4a b3       	in	r20, 0x1a	; 26
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	b9 01       	movw	r22, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_Init_Pin+0x16>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	8a 95       	dec	r24
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_Init_Pin+0x12>
 2b8:	cb 01       	movw	r24, r22
 2ba:	84 2b       	or	r24, r20
 2bc:	8a bb       	out	0x1a, r24	; 26
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 95       	ret
 2c2:	61 11       	cpse	r22, r1
 2c4:	7d c0       	rjmp	.+250    	; 0x3c0 <DIO_Init_Pin+0x122>
 2c6:	4a b3       	in	r20, 0x1a	; 26
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	b9 01       	movw	r22, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_Init_Pin+0x36>
 2d0:	66 0f       	add	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	8a 95       	dec	r24
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_Init_Pin+0x32>
 2d8:	cb 01       	movw	r24, r22
 2da:	80 95       	com	r24
 2dc:	84 23       	and	r24, r20
 2de:	8a bb       	out	0x1a, r24	; 26
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
 2e4:	98 ef       	ldi	r25, 0xF8	; 248
 2e6:	98 0f       	add	r25, r24
 2e8:	98 30       	cpi	r25, 0x08	; 8
 2ea:	08 f5       	brcc	.+66     	; 0x32e <DIO_Init_Pin+0x90>
 2ec:	61 30       	cpi	r22, 0x01	; 1
 2ee:	71 f4       	brne	.+28     	; 0x30c <DIO_Init_Pin+0x6e>
 2f0:	47 b3       	in	r20, 0x17	; 23
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	b9 01       	movw	r22, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_Init_Pin+0x60>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	9a 95       	dec	r25
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_Init_Pin+0x5c>
 302:	cb 01       	movw	r24, r22
 304:	84 2b       	or	r24, r20
 306:	87 bb       	out	0x17, r24	; 23
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret
 30c:	61 11       	cpse	r22, r1
 30e:	5a c0       	rjmp	.+180    	; 0x3c4 <DIO_Init_Pin+0x126>
 310:	47 b3       	in	r20, 0x17	; 23
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	b9 01       	movw	r22, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_Init_Pin+0x80>
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	9a 95       	dec	r25
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_Init_Pin+0x7c>
 322:	cb 01       	movw	r24, r22
 324:	80 95       	com	r24
 326:	84 23       	and	r24, r20
 328:	87 bb       	out	0x17, r24	; 23
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	08 95       	ret
 32e:	90 ef       	ldi	r25, 0xF0	; 240
 330:	98 0f       	add	r25, r24
 332:	98 30       	cpi	r25, 0x08	; 8
 334:	08 f5       	brcc	.+66     	; 0x378 <DIO_Init_Pin+0xda>
 336:	61 30       	cpi	r22, 0x01	; 1
 338:	71 f4       	brne	.+28     	; 0x356 <DIO_Init_Pin+0xb8>
 33a:	44 b3       	in	r20, 0x14	; 20
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	b9 01       	movw	r22, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_Init_Pin+0xaa>
 344:	66 0f       	add	r22, r22
 346:	77 1f       	adc	r23, r23
 348:	9a 95       	dec	r25
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_Init_Pin+0xa6>
 34c:	cb 01       	movw	r24, r22
 34e:	84 2b       	or	r24, r20
 350:	84 bb       	out	0x14, r24	; 20
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret
 356:	61 11       	cpse	r22, r1
 358:	37 c0       	rjmp	.+110    	; 0x3c8 <DIO_Init_Pin+0x12a>
 35a:	44 b3       	in	r20, 0x14	; 20
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	b9 01       	movw	r22, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_Init_Pin+0xca>
 364:	66 0f       	add	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	9a 95       	dec	r25
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_Init_Pin+0xc6>
 36c:	cb 01       	movw	r24, r22
 36e:	80 95       	com	r24
 370:	84 23       	and	r24, r20
 372:	84 bb       	out	0x14, r24	; 20
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	08 95       	ret
 378:	88 51       	subi	r24, 0x18	; 24
 37a:	88 30       	cpi	r24, 0x08	; 8
 37c:	38 f5       	brcc	.+78     	; 0x3cc <DIO_Init_Pin+0x12e>
 37e:	61 30       	cpi	r22, 0x01	; 1
 380:	71 f4       	brne	.+28     	; 0x39e <DIO_Init_Pin+0x100>
 382:	41 b3       	in	r20, 0x11	; 17
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	b9 01       	movw	r22, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_Init_Pin+0xf2>
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	8a 95       	dec	r24
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_Init_Pin+0xee>
 394:	cb 01       	movw	r24, r22
 396:	84 2b       	or	r24, r20
 398:	81 bb       	out	0x11, r24	; 17
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 95       	ret
 39e:	61 11       	cpse	r22, r1
 3a0:	17 c0       	rjmp	.+46     	; 0x3d0 <DIO_Init_Pin+0x132>
 3a2:	41 b3       	in	r20, 0x11	; 17
 3a4:	21 e0       	ldi	r18, 0x01	; 1
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	b9 01       	movw	r22, r18
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_Init_Pin+0x112>
 3ac:	66 0f       	add	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	8a 95       	dec	r24
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_Init_Pin+0x10e>
 3b4:	cb 01       	movw	r24, r22
 3b6:	80 95       	com	r24
 3b8:	84 23       	and	r24, r20
 3ba:	81 bb       	out	0x11, r24	; 17
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	08 95       	ret
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	08 95       	ret
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	08 95       	ret
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	08 95       	ret
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	08 95       	ret
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	08 95       	ret

000003d4 <DIO_Write_Pin>:

uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
	/* Check Bit in PORT A */
	if(( u8_Pin_Number >= A0 ) && ( u8_Pin_Number <=A7 ))
 3d4:	88 30       	cpi	r24, 0x08	; 8
 3d6:	08 f5       	brcc	.+66     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		if ( Pin_Value == HIGH )
 3d8:	61 30       	cpi	r22, 0x01	; 1
 3da:	71 f4       	brne	.+28     	; 0x3f8 <DIO_Write_Pin+0x24>
		{
			SET_BIT (PORTA,u8_Pin_Number);
 3dc:	4b b3       	in	r20, 0x1b	; 27
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	b9 01       	movw	r22, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_Write_Pin+0x16>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	8a 95       	dec	r24
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_Write_Pin+0x12>
 3ee:	cb 01       	movw	r24, r22
 3f0:	84 2b       	or	r24, r20
 3f2:	8b bb       	out	0x1b, r24	; 27
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	08 95       	ret
	{
		if ( Pin_Value == HIGH )
		{
			SET_BIT (PORTA,u8_Pin_Number);
		}
			else if ( Pin_Value == LOW  )
 3f8:	61 11       	cpse	r22, r1
 3fa:	7d c0       	rjmp	.+250    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
			{
				CLR_BIT(PORTA,u8_Pin_Number);
 3fc:	4b b3       	in	r20, 0x1b	; 27
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	b9 01       	movw	r22, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	8a 95       	dec	r24
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	cb 01       	movw	r24, r22
 410:	80 95       	com	r24
 412:	84 23       	and	r24, r20
 414:	8b bb       	out	0x1b, r24	; 27
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check Bit in PORT B */
	else if(( u8_Pin_Number >= B0 ) && ( u8_Pin_Number <=B7 ))
 41a:	98 ef       	ldi	r25, 0xF8	; 248
 41c:	98 0f       	add	r25, r24
 41e:	98 30       	cpi	r25, 0x08	; 8
 420:	08 f5       	brcc	.+66     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	{
		u8_Pin_Number -= AVR_PORT_BITS;
		if ( Pin_Value == HIGH )
 422:	61 30       	cpi	r22, 0x01	; 1
 424:	71 f4       	brne	.+28     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		{
			SET_BIT(PORTB,u8_Pin_Number);
 426:	48 b3       	in	r20, 0x18	; 24
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	b9 01       	movw	r22, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	9a 95       	dec	r25
 436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	cb 01       	movw	r24, r22
 43a:	84 2b       	or	r24, r20
 43c:	88 bb       	out	0x18, r24	; 24
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	08 95       	ret
		u8_Pin_Number -= AVR_PORT_BITS;
		if ( Pin_Value == HIGH )
		{
			SET_BIT(PORTB,u8_Pin_Number);
		}
			else if ( Pin_Value == LOW  )
 442:	61 11       	cpse	r22, r1
 444:	5a c0       	rjmp	.+180    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
			{
				CLR_BIT(PORTB,u8_Pin_Number);
 446:	48 b3       	in	r20, 0x18	; 24
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	b9 01       	movw	r22, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	9a 95       	dec	r25
 456:	e2 f7       	brpl	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 458:	cb 01       	movw	r24, r22
 45a:	80 95       	com	r24
 45c:	84 23       	and	r24, r20
 45e:	88 bb       	out	0x18, r24	; 24
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check Bit in PORT C */
	else if(( u8_Pin_Number >= C0 ) && ( u8_Pin_Number <=C7 ))
 464:	90 ef       	ldi	r25, 0xF0	; 240
 466:	98 0f       	add	r25, r24
 468:	98 30       	cpi	r25, 0x08	; 8
 46a:	08 f5       	brcc	.+66     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
	{
		u8_Pin_Number -= AVR_PORT_BITS;
		u8_Pin_Number -= AVR_PORT_BITS;
		if ( Pin_Value == HIGH )
 46c:	61 30       	cpi	r22, 0x01	; 1
 46e:	71 f4       	brne	.+28     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		{
			SET_BIT(PORTC,u8_Pin_Number);
 470:	45 b3       	in	r20, 0x15	; 21
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	b9 01       	movw	r22, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	9a 95       	dec	r25
 480:	e2 f7       	brpl	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	cb 01       	movw	r24, r22
 484:	84 2b       	or	r24, r20
 486:	85 bb       	out	0x15, r24	; 21
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	08 95       	ret
		u8_Pin_Number -= AVR_PORT_BITS;
		if ( Pin_Value == HIGH )
		{
			SET_BIT(PORTC,u8_Pin_Number);
		}
			else if ( Pin_Value == LOW  )
 48c:	61 11       	cpse	r22, r1
 48e:	37 c0       	rjmp	.+110    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
			{
				CLR_BIT(PORTC,u8_Pin_Number);
 490:	45 b3       	in	r20, 0x15	; 21
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	b9 01       	movw	r22, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	9a 95       	dec	r25
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 4a2:	cb 01       	movw	r24, r22
 4a4:	80 95       	com	r24
 4a6:	84 23       	and	r24, r20
 4a8:	85 bb       	out	0x15, r24	; 21
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check Bit in PORT D */
	else if(( u8_Pin_Number >= D0 ) && ( u8_Pin_Number <=D7 ))
 4ae:	88 51       	subi	r24, 0x18	; 24
 4b0:	88 30       	cpi	r24, 0x08	; 8
 4b2:	38 f5       	brcc	.+78     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
	{
		u8_Pin_Number -= AVR_PORT_BITS;
		u8_Pin_Number -= AVR_PORT_BITS;
		u8_Pin_Number -= AVR_PORT_BITS;
		if ( Pin_Value == HIGH )
 4b4:	61 30       	cpi	r22, 0x01	; 1
 4b6:	71 f4       	brne	.+28     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		{
			SET_BIT(PORTD,u8_Pin_Number);
 4b8:	42 b3       	in	r20, 0x12	; 18
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	b9 01       	movw	r22, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	8a 95       	dec	r24
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4ca:	cb 01       	movw	r24, r22
 4cc:	84 2b       	or	r24, r20
 4ce:	82 bb       	out	0x12, r24	; 18
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	08 95       	ret
		u8_Pin_Number -= AVR_PORT_BITS;
		if ( Pin_Value == HIGH )
		{
			SET_BIT(PORTD,u8_Pin_Number);
		}
			else if ( Pin_Value == LOW  )
 4d4:	61 11       	cpse	r22, r1
 4d6:	17 c0       	rjmp	.+46     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
			{
				CLR_BIT(PORTD,u8_Pin_Number);
 4d8:	42 b3       	in	r20, 0x12	; 18
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	b9 01       	movw	r22, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4ea:	cb 01       	movw	r24, r22
 4ec:	80 95       	com	r24
 4ee:	84 23       	and	r24, r20
 4f0:	82 bb       	out	0x12, r24	; 18
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
			{
				CLR_BIT(PORTA,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	08 95       	ret
			{
				CLR_BIT(PORTB,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	08 95       	ret
			{
				CLR_BIT(PORTC,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	08 95       	ret
				}
	}
	/* ERROR Bit Number is wrong */
	else
	{
		retval = ERROR_NOK;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	08 95       	ret
			{
				CLR_BIT(PORTD,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 506:	81 e0       	ldi	r24, 0x01	; 1
	{
		retval = ERROR_NOK;
	}
	return retval;

}
 508:	08 95       	ret

0000050a <SPI_Init>:
	{
		retval = ERROR_INTERRUPT_POLLING;		/* Wrong SPI Not Interrupt or Polling  */
	}

	return retval;
}
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	ec 01       	movw	r28, r24
 510:	88 81       	ld	r24, Y
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	09 f0       	breq	.+2      	; 0x518 <SPI_Init+0xe>
 516:	78 c0       	rjmp	.+240    	; 0x608 <SPI_Init+0xfe>
 518:	6c 9a       	sbi	0x0d, 4	; 13
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	8c e0       	ldi	r24, 0x0C	; 12
 51e:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Init_Pin>
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	8d e0       	ldi	r24, 0x0D	; 13
 526:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Init_Pin>
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	8e e0       	ldi	r24, 0x0E	; 14
 52e:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Init_Pin>
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	8f e0       	ldi	r24, 0x0F	; 15
 536:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Init_Pin>
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	81 11       	cpse	r24, r1
 53e:	1a c0       	rjmp	.+52     	; 0x574 <SPI_Init+0x6a>
 540:	70 98       	cbi	0x0e, 0	; 14
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	51 f0       	breq	.+20     	; 0x55c <SPI_Init+0x52>
 548:	28 f0       	brcs	.+10     	; 0x554 <SPI_Init+0x4a>
 54a:	82 30       	cpi	r24, 0x02	; 2
 54c:	59 f0       	breq	.+22     	; 0x564 <SPI_Init+0x5a>
 54e:	83 30       	cpi	r24, 0x03	; 3
 550:	69 f0       	breq	.+26     	; 0x56c <SPI_Init+0x62>
 552:	26 c0       	rjmp	.+76     	; 0x5a0 <SPI_Init+0x96>
 554:	68 98       	cbi	0x0d, 0	; 13
 556:	69 98       	cbi	0x0d, 1	; 13
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	27 c0       	rjmp	.+78     	; 0x5aa <SPI_Init+0xa0>
 55c:	68 9a       	sbi	0x0d, 0	; 13
 55e:	69 98       	cbi	0x0d, 1	; 13
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	23 c0       	rjmp	.+70     	; 0x5aa <SPI_Init+0xa0>
 564:	68 98       	cbi	0x0d, 0	; 13
 566:	69 9a       	sbi	0x0d, 1	; 13
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	1f c0       	rjmp	.+62     	; 0x5aa <SPI_Init+0xa0>
 56c:	68 9a       	sbi	0x0d, 0	; 13
 56e:	69 9a       	sbi	0x0d, 1	; 13
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	1b c0       	rjmp	.+54     	; 0x5aa <SPI_Init+0xa0>
 574:	81 30       	cpi	r24, 0x01	; 1
 576:	b1 f4       	brne	.+44     	; 0x5a4 <SPI_Init+0x9a>
 578:	70 9a       	sbi	0x0e, 0	; 14
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	41 f0       	breq	.+16     	; 0x590 <SPI_Init+0x86>
 580:	18 f0       	brcs	.+6      	; 0x588 <SPI_Init+0x7e>
 582:	82 30       	cpi	r24, 0x02	; 2
 584:	49 f0       	breq	.+18     	; 0x598 <SPI_Init+0x8e>
 586:	10 c0       	rjmp	.+32     	; 0x5a8 <SPI_Init+0x9e>
 588:	68 98       	cbi	0x0d, 0	; 13
 58a:	69 98       	cbi	0x0d, 1	; 13
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	0d c0       	rjmp	.+26     	; 0x5aa <SPI_Init+0xa0>
 590:	68 9a       	sbi	0x0d, 0	; 13
 592:	69 98       	cbi	0x0d, 1	; 13
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	09 c0       	rjmp	.+18     	; 0x5aa <SPI_Init+0xa0>
 598:	68 98       	cbi	0x0d, 0	; 13
 59a:	69 9a       	sbi	0x0d, 1	; 13
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	05 c0       	rjmp	.+10     	; 0x5aa <SPI_Init+0xa0>
 5a0:	8e ef       	ldi	r24, 0xFE	; 254
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <SPI_Init+0xa0>
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <SPI_Init+0xa0>
 5a8:	8e ef       	ldi	r24, 0xFE	; 254
 5aa:	9b 81       	ldd	r25, Y+3	; 0x03
 5ac:	91 30       	cpi	r25, 0x01	; 1
 5ae:	41 f4       	brne	.+16     	; 0x5c0 <SPI_Init+0xb6>
 5b0:	6f 9a       	sbi	0x0d, 7	; 13
 5b2:	9f b7       	in	r25, 0x3f	; 63
 5b4:	90 68       	ori	r25, 0x80	; 128
 5b6:	9f bf       	out	0x3f, r25	; 63
 5b8:	91 e0       	ldi	r25, 0x01	; 1
 5ba:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <gu8_Interrupt_Polling_Mode>
 5be:	06 c0       	rjmp	.+12     	; 0x5cc <SPI_Init+0xc2>
 5c0:	91 11       	cpse	r25, r1
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <SPI_Init+0xc0>
 5c4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <gu8_Interrupt_Polling_Mode>
 5c8:	01 c0       	rjmp	.+2      	; 0x5cc <SPI_Init+0xc2>
 5ca:	8c ef       	ldi	r24, 0xFC	; 252
 5cc:	9d 81       	ldd	r25, Y+5	; 0x05
 5ce:	91 11       	cpse	r25, r1
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <SPI_Init+0xcc>
 5d2:	6d 98       	cbi	0x0d, 5	; 13
 5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <SPI_Init+0xd6>
 5d6:	91 30       	cpi	r25, 0x01	; 1
 5d8:	11 f4       	brne	.+4      	; 0x5de <SPI_Init+0xd4>
 5da:	6d 9a       	sbi	0x0d, 5	; 13
 5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <SPI_Init+0xd6>
 5de:	8b ef       	ldi	r24, 0xFB	; 251
 5e0:	9e 81       	ldd	r25, Y+6	; 0x06
 5e2:	91 11       	cpse	r25, r1
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <SPI_Init+0xe0>
 5e6:	6b 98       	cbi	0x0d, 3	; 13
 5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <SPI_Init+0xea>
 5ea:	91 30       	cpi	r25, 0x01	; 1
 5ec:	11 f4       	brne	.+4      	; 0x5f2 <SPI_Init+0xe8>
 5ee:	6b 9a       	sbi	0x0d, 3	; 13
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <SPI_Init+0xea>
 5f2:	8a ef       	ldi	r24, 0xFA	; 250
 5f4:	9c 81       	ldd	r25, Y+4	; 0x04
 5f6:	91 11       	cpse	r25, r1
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <SPI_Init+0xf4>
 5fa:	6a 98       	cbi	0x0d, 2	; 13
 5fc:	4c c0       	rjmp	.+152    	; 0x696 <SPI_Init+0x18c>
 5fe:	91 30       	cpi	r25, 0x01	; 1
 600:	09 f0       	breq	.+2      	; 0x604 <SPI_Init+0xfa>
 602:	44 c0       	rjmp	.+136    	; 0x68c <SPI_Init+0x182>
 604:	6a 9a       	sbi	0x0d, 2	; 13
 606:	47 c0       	rjmp	.+142    	; 0x696 <SPI_Init+0x18c>
 608:	81 11       	cpse	r24, r1
 60a:	42 c0       	rjmp	.+132    	; 0x690 <SPI_Init+0x186>
 60c:	6c 98       	cbi	0x0d, 4	; 13
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	8c e0       	ldi	r24, 0x0C	; 12
 612:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Init_Pin>
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	8d e0       	ldi	r24, 0x0D	; 13
 61a:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Init_Pin>
 61e:	61 e0       	ldi	r22, 0x01	; 1
 620:	8e e0       	ldi	r24, 0x0E	; 14
 622:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Init_Pin>
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	8f e0       	ldi	r24, 0x0F	; 15
 62a:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Init_Pin>
 62e:	8b 81       	ldd	r24, Y+3	; 0x03
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	49 f4       	brne	.+18     	; 0x646 <SPI_Init+0x13c>
 634:	6f 9a       	sbi	0x0d, 7	; 13
 636:	8f b7       	in	r24, 0x3f	; 63
 638:	80 68       	ori	r24, 0x80	; 128
 63a:	8f bf       	out	0x3f, r24	; 63
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <gu8_Interrupt_Polling_Mode>
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	06 c0       	rjmp	.+12     	; 0x652 <SPI_Init+0x148>
 646:	81 11       	cpse	r24, r1
 648:	03 c0       	rjmp	.+6      	; 0x650 <SPI_Init+0x146>
 64a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <gu8_Interrupt_Polling_Mode>
 64e:	01 c0       	rjmp	.+2      	; 0x652 <SPI_Init+0x148>
 650:	8c ef       	ldi	r24, 0xFC	; 252
 652:	9d 81       	ldd	r25, Y+5	; 0x05
 654:	91 11       	cpse	r25, r1
 656:	02 c0       	rjmp	.+4      	; 0x65c <SPI_Init+0x152>
 658:	6d 98       	cbi	0x0d, 5	; 13
 65a:	05 c0       	rjmp	.+10     	; 0x666 <SPI_Init+0x15c>
 65c:	91 30       	cpi	r25, 0x01	; 1
 65e:	11 f4       	brne	.+4      	; 0x664 <SPI_Init+0x15a>
 660:	6d 9a       	sbi	0x0d, 5	; 13
 662:	01 c0       	rjmp	.+2      	; 0x666 <SPI_Init+0x15c>
 664:	8b ef       	ldi	r24, 0xFB	; 251
 666:	9e 81       	ldd	r25, Y+6	; 0x06
 668:	91 11       	cpse	r25, r1
 66a:	02 c0       	rjmp	.+4      	; 0x670 <SPI_Init+0x166>
 66c:	6b 98       	cbi	0x0d, 3	; 13
 66e:	05 c0       	rjmp	.+10     	; 0x67a <SPI_Init+0x170>
 670:	91 30       	cpi	r25, 0x01	; 1
 672:	11 f4       	brne	.+4      	; 0x678 <SPI_Init+0x16e>
 674:	6b 9a       	sbi	0x0d, 3	; 13
 676:	01 c0       	rjmp	.+2      	; 0x67a <SPI_Init+0x170>
 678:	8a ef       	ldi	r24, 0xFA	; 250
 67a:	9c 81       	ldd	r25, Y+4	; 0x04
 67c:	91 11       	cpse	r25, r1
 67e:	02 c0       	rjmp	.+4      	; 0x684 <SPI_Init+0x17a>
 680:	6a 98       	cbi	0x0d, 2	; 13
 682:	09 c0       	rjmp	.+18     	; 0x696 <SPI_Init+0x18c>
 684:	91 30       	cpi	r25, 0x01	; 1
 686:	31 f4       	brne	.+12     	; 0x694 <SPI_Init+0x18a>
 688:	6a 9a       	sbi	0x0d, 2	; 13
 68a:	05 c0       	rjmp	.+10     	; 0x696 <SPI_Init+0x18c>
 68c:	89 ef       	ldi	r24, 0xF9	; 249
 68e:	03 c0       	rjmp	.+6      	; 0x696 <SPI_Init+0x18c>
 690:	8d ef       	ldi	r24, 0xFD	; 253
 692:	01 c0       	rjmp	.+2      	; 0x696 <SPI_Init+0x18c>
 694:	89 ef       	ldi	r24, 0xF9	; 249
 696:	6e 9a       	sbi	0x0d, 6	; 13
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	08 95       	ret

0000069e <SPI_Receive_Byte>:

/* Description : SPI Receive Byte                                                */
/* Input       : u8_Data "pointer to u8 Data"                                    */
/* Output      : Error Checking                                                  */
uint8_t SPI_Receive_Byte(uint8_t *pu8_Data)
{
 69e:	fc 01       	movw	r30, r24
	uint8_t retval = ERROR_OK;
	/* Check if Polling or Interrupt */
	if ( gu8_Interrupt_Polling_Mode == INTERRUPT )
 6a0:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <gu8_Interrupt_Polling_Mode>
 6a4:	91 30       	cpi	r25, 0x01	; 1
 6a6:	31 f4       	brne	.+12     	; 0x6b4 <SPI_Receive_Byte+0x16>
	{
		gu8_Data_SentFlag=0;			/* Clear Global Flag of ISR */
 6a8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <gu8_Data_SentFlag>
		*pu8_Data = SPDR;				/* Read DATA from SPI */
 6ac:	8f b1       	in	r24, 0x0f	; 15
 6ae:	80 83       	st	Z, r24
/* Description : SPI Receive Byte                                                */
/* Input       : u8_Data "pointer to u8 Data"                                    */
/* Output      : Error Checking                                                  */
uint8_t SPI_Receive_Byte(uint8_t *pu8_Data)
{
	uint8_t retval = ERROR_OK;
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	08 95       	ret
	if ( gu8_Interrupt_Polling_Mode == INTERRUPT )
	{
		gu8_Data_SentFlag=0;			/* Clear Global Flag of ISR */
		*pu8_Data = SPDR;				/* Read DATA from SPI */
	}
	else if ( gu8_Interrupt_Polling_Mode == POLLING )
 6b4:	91 11       	cpse	r25, r1
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <SPI_Receive_Byte+0x26>
	{
		while( ! READ_BIT(SPSR,SPIF) );	/* Loop until getting Flag */
 6b8:	77 9b       	sbis	0x0e, 7	; 14
 6ba:	fe cf       	rjmp	.-4      	; 0x6b8 <SPI_Receive_Byte+0x1a>
		*pu8_Data = SPDR;				/* Read DATA from SPI */
 6bc:	8f b1       	in	r24, 0x0f	; 15
 6be:	80 83       	st	Z, r24
/* Description : SPI Receive Byte                                                */
/* Input       : u8_Data "pointer to u8 Data"                                    */
/* Output      : Error Checking                                                  */
uint8_t SPI_Receive_Byte(uint8_t *pu8_Data)
{
	uint8_t retval = ERROR_OK;
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	08 95       	ret
		while( ! READ_BIT(SPSR,SPIF) );	/* Loop until getting Flag */
		*pu8_Data = SPDR;				/* Read DATA from SPI */
	}
	else 
	{
		retval = ERROR_INTERRUPT_POLLING;		/* Wrong SPI Not Interrupt or Polling  */
 6c4:	8c ef       	ldi	r24, 0xFC	; 252
	}
	return retval;
}
 6c6:	08 95       	ret

000006c8 <__vector_12>:

/* ISR of SPI */
void __vector_12(void)
{
 6c8:	1f 92       	push	r1
 6ca:	0f 92       	push	r0
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	0f 92       	push	r0
 6d0:	11 24       	eor	r1, r1
 6d2:	2f 93       	push	r18
 6d4:	3f 93       	push	r19
 6d6:	4f 93       	push	r20
 6d8:	5f 93       	push	r21
 6da:	6f 93       	push	r22
 6dc:	7f 93       	push	r23
 6de:	8f 93       	push	r24
 6e0:	9f 93       	push	r25
 6e2:	af 93       	push	r26
 6e4:	bf 93       	push	r27
 6e6:	ef 93       	push	r30
 6e8:	ff 93       	push	r31
	gu8_Data_SentFlag = 1;    /* Set the Global variable to ensure of ISR data sent successfully. */
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gu8_Data_SentFlag>
	if(callBack_spi != NULL_PTR )
 6f0:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <callBack_spi>
 6f4:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <callBack_spi+0x1>
 6f8:	30 97       	sbiw	r30, 0x00	; 0
 6fa:	09 f0       	breq	.+2      	; 0x6fe <__vector_12+0x36>
	{
		callBack_spi();
 6fc:	09 95       	icall
	}

}
 6fe:	ff 91       	pop	r31
 700:	ef 91       	pop	r30
 702:	bf 91       	pop	r27
 704:	af 91       	pop	r26
 706:	9f 91       	pop	r25
 708:	8f 91       	pop	r24
 70a:	7f 91       	pop	r23
 70c:	6f 91       	pop	r22
 70e:	5f 91       	pop	r21
 710:	4f 91       	pop	r20
 712:	3f 91       	pop	r19
 714:	2f 91       	pop	r18
 716:	0f 90       	pop	r0
 718:	0f be       	out	0x3f, r0	; 63
 71a:	0f 90       	pop	r0
 71c:	1f 90       	pop	r1
 71e:	18 95       	reti

00000720 <Set_Call_Back_SPI>:

/* Global SPI ISR set callback function */
uint8_t Set_Call_Back_SPI(void (*ptr)(void))
{
	uint8_t retval = ERROR_OK;
	if( ptr != NULL_PTR )
 720:	00 97       	sbiw	r24, 0x00	; 0
 722:	31 f0       	breq	.+12     	; 0x730 <Set_Call_Back_SPI+0x10>
	{
		callBack_spi = ptr;
 724:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <callBack_spi+0x1>
 728:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <callBack_spi>
}

/* Global SPI ISR set callback function */
uint8_t Set_Call_Back_SPI(void (*ptr)(void))
{
	uint8_t retval = ERROR_OK;
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	08 95       	ret
	{
		callBack_spi = ptr;
	}
	else
	{
		retval = ERROR_NULL_POINTER ;
 730:	8b ef       	ldi	r24, 0xFB	; 251
	}
	return retval;
 732:	08 95       	ret

00000734 <main>:
 #include "DIO.h"
 #include "APP.h"

 int main(void)
 {
	SPI_Init(&SPI_RX);							/* Init SPI */
 734:	83 e6       	ldi	r24, 0x63	; 99
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_Init>
	UART_Init(&obj_UART);						/* Init UART */
 73c:	8a e6       	ldi	r24, 0x6A	; 106
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 b5 03 	call	0x76a	; 0x76a <UART_Init>
	Set_Call_Back_SPI(g_VSE_TX_callbackSPI);	/* Set call back function for SPI */
 744:	86 ee       	ldi	r24, 0xE6	; 230
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 90 03 	call	0x720	; 0x720 <Set_Call_Back_SPI>
	Set_Call_Back_UART_TX(g_VSE_TX_callback);	/* set call back function for UART TX */
 74c:	8e ee       	ldi	r24, 0xEE	; 238
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 3d 04 	call	0x87a	; 0x87a <Set_Call_Back_UART_TX>

	DIO_Init_Pin(C4,IN);						/* Bush Button to fetch data */
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	84 e1       	ldi	r24, 0x14	; 20
 758:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Init_Pin>
	DIO_Init_Pin(B0,OUT);	 					/* feed back to kit 1 to fetch new speed an reset timer */
 75c:	61 e0       	ldi	r22, 0x01	; 1
 75e:	88 e0       	ldi	r24, 0x08	; 8
 760:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Init_Pin>

	 while (1)
	 {
		VSE_dispatcher_KIT2();					/* Looping for states */
 764:	0e 94 49 00 	call	0x92	; 0x92 <VSE_dispatcher_KIT2>
 768:	fd cf       	rjmp	.-6      	; 0x764 <main+0x30>

0000076a <UART_Init>:
	else
	{
		retval = E_PTR_IS_NULL ;
	}
	return retval;
}
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	00 97       	sbiw	r24, 0x00	; 0
 770:	09 f4       	brne	.+2      	; 0x774 <UART_Init+0xa>
 772:	6f c0       	rjmp	.+222    	; 0x852 <UART_Init+0xe8>
 774:	ec 01       	movw	r28, r24
 776:	88 81       	ld	r24, Y
 778:	81 30       	cpi	r24, 0x01	; 1
 77a:	49 f4       	brne	.+18     	; 0x78e <UART_Init+0x24>
 77c:	0e 94 4b 01 	call	0x296	; 0x296 <Enable_GlobalInterrupt>
 780:	57 9a       	sbi	0x0a, 7	; 10
 782:	56 9a       	sbi	0x0a, 6	; 10
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <u8_UART_InterruptMode>
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	09 c0       	rjmp	.+18     	; 0x7a0 <UART_Init+0x36>
 78e:	81 11       	cpse	r24, r1
 790:	06 c0       	rjmp	.+12     	; 0x79e <UART_Init+0x34>
 792:	57 98       	cbi	0x0a, 7	; 10
 794:	56 98       	cbi	0x0a, 6	; 10
 796:	55 98       	cbi	0x0a, 5	; 10
 798:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <u8_UART_InterruptMode>
 79c:	01 c0       	rjmp	.+2      	; 0x7a0 <UART_Init+0x36>
 79e:	84 e0       	ldi	r24, 0x04	; 4
 7a0:	90 b5       	in	r25, 0x20	; 32
 7a2:	90 68       	ori	r25, 0x80	; 128
 7a4:	90 bd       	out	0x20, r25	; 32
 7a6:	99 81       	ldd	r25, Y+1	; 0x01
 7a8:	91 11       	cpse	r25, r1
 7aa:	0b c0       	rjmp	.+22     	; 0x7c2 <UART_Init+0x58>
 7ac:	90 b5       	in	r25, 0x20	; 32
 7ae:	9f 7b       	andi	r25, 0xBF	; 191
 7b0:	90 bd       	out	0x20, r25	; 32
 7b2:	2a 81       	ldd	r18, Y+2	; 0x02
 7b4:	3b 81       	ldd	r19, Y+3	; 0x03
 7b6:	23 33       	cpi	r18, 0x33	; 51
 7b8:	31 05       	cpc	r19, r1
 7ba:	49 f4       	brne	.+18     	; 0x7ce <UART_Init+0x64>
 7bc:	93 e3       	ldi	r25, 0x33	; 51
 7be:	99 b9       	out	0x09, r25	; 9
 7c0:	09 c0       	rjmp	.+18     	; 0x7d4 <UART_Init+0x6a>
 7c2:	91 30       	cpi	r25, 0x01	; 1
 7c4:	31 f4       	brne	.+12     	; 0x7d2 <UART_Init+0x68>
 7c6:	90 b5       	in	r25, 0x20	; 32
 7c8:	90 64       	ori	r25, 0x40	; 64
 7ca:	90 bd       	out	0x20, r25	; 32
 7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <UART_Init+0x6a>
 7ce:	82 e0       	ldi	r24, 0x02	; 2
 7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <UART_Init+0x6a>
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	9d 81       	ldd	r25, Y+5	; 0x05
 7d6:	91 11       	cpse	r25, r1
 7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <UART_Init+0x7e>
 7da:	90 b5       	in	r25, 0x20	; 32
 7dc:	9f 7d       	andi	r25, 0xDF	; 223
 7de:	90 bd       	out	0x20, r25	; 32
 7e0:	90 b5       	in	r25, 0x20	; 32
 7e2:	9f 7e       	andi	r25, 0xEF	; 239
 7e4:	90 bd       	out	0x20, r25	; 32
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <UART_Init+0x80>
 7e8:	86 e0       	ldi	r24, 0x06	; 6
 7ea:	9e 81       	ldd	r25, Y+6	; 0x06
 7ec:	91 11       	cpse	r25, r1
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <UART_Init+0x8e>
 7f0:	90 b5       	in	r25, 0x20	; 32
 7f2:	97 7f       	andi	r25, 0xF7	; 247
 7f4:	90 bd       	out	0x20, r25	; 32
 7f6:	07 c0       	rjmp	.+14     	; 0x806 <UART_Init+0x9c>
 7f8:	91 30       	cpi	r25, 0x01	; 1
 7fa:	21 f4       	brne	.+8      	; 0x804 <UART_Init+0x9a>
 7fc:	90 b5       	in	r25, 0x20	; 32
 7fe:	98 60       	ori	r25, 0x08	; 8
 800:	90 bd       	out	0x20, r25	; 32
 802:	01 c0       	rjmp	.+2      	; 0x806 <UART_Init+0x9c>
 804:	87 e0       	ldi	r24, 0x07	; 7
 806:	9c 81       	ldd	r25, Y+4	; 0x04
 808:	91 11       	cpse	r25, r1
 80a:	04 c0       	rjmp	.+8      	; 0x814 <UART_Init+0xaa>
 80c:	90 b5       	in	r25, 0x20	; 32
 80e:	90 bd       	out	0x20, r25	; 32
 810:	52 98       	cbi	0x0a, 2	; 10
 812:	1c c0       	rjmp	.+56     	; 0x84c <UART_Init+0xe2>
 814:	92 30       	cpi	r25, 0x02	; 2
 816:	29 f4       	brne	.+10     	; 0x822 <UART_Init+0xb8>
 818:	90 b5       	in	r25, 0x20	; 32
 81a:	92 60       	ori	r25, 0x02	; 2
 81c:	90 bd       	out	0x20, r25	; 32
 81e:	52 98       	cbi	0x0a, 2	; 10
 820:	15 c0       	rjmp	.+42     	; 0x84c <UART_Init+0xe2>
 822:	94 30       	cpi	r25, 0x04	; 4
 824:	29 f4       	brne	.+10     	; 0x830 <UART_Init+0xc6>
 826:	90 b5       	in	r25, 0x20	; 32
 828:	94 60       	ori	r25, 0x04	; 4
 82a:	90 bd       	out	0x20, r25	; 32
 82c:	52 98       	cbi	0x0a, 2	; 10
 82e:	0e c0       	rjmp	.+28     	; 0x84c <UART_Init+0xe2>
 830:	96 30       	cpi	r25, 0x06	; 6
 832:	21 f4       	brne	.+8      	; 0x83c <UART_Init+0xd2>
 834:	90 b5       	in	r25, 0x20	; 32
 836:	96 68       	ori	r25, 0x86	; 134
 838:	90 bd       	out	0x20, r25	; 32
 83a:	08 c0       	rjmp	.+16     	; 0x84c <UART_Init+0xe2>
 83c:	97 30       	cpi	r25, 0x07	; 7
 83e:	29 f4       	brne	.+10     	; 0x84a <UART_Init+0xe0>
 840:	90 b5       	in	r25, 0x20	; 32
 842:	96 60       	ori	r25, 0x06	; 6
 844:	90 bd       	out	0x20, r25	; 32
 846:	52 9a       	sbi	0x0a, 2	; 10
 848:	01 c0       	rjmp	.+2      	; 0x84c <UART_Init+0xe2>
 84a:	83 e0       	ldi	r24, 0x03	; 3
 84c:	54 9a       	sbi	0x0a, 4	; 10
 84e:	53 9a       	sbi	0x0a, 3	; 10
 850:	01 c0       	rjmp	.+2      	; 0x854 <UART_Init+0xea>
 852:	85 e0       	ldi	r24, 0x05	; 5
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	08 95       	ret

0000085a <UART_Send_Byte>:
 85a:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <u8_UART_InterruptMode>
 85e:	91 11       	cpse	r25, r1
 860:	05 c0       	rjmp	.+10     	; 0x86c <__stack+0xd>
 862:	5d 9b       	sbis	0x0b, 5	; 11
 864:	fe cf       	rjmp	.-4      	; 0x862 <__stack+0x3>
 866:	8c b9       	out	0x0c, r24	; 12
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	08 95       	ret
 86c:	91 30       	cpi	r25, 0x01	; 1
 86e:	19 f4       	brne	.+6      	; 0x876 <__stack+0x17>
 870:	8c b9       	out	0x0c, r24	; 12
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	08 95       	ret
 876:	84 e0       	ldi	r24, 0x04	; 4
 878:	08 95       	ret

0000087a <Set_Call_Back_UART_TX>:
 87a:	00 97       	sbiw	r24, 0x00	; 0
 87c:	31 f0       	breq	.+12     	; 0x88a <Set_Call_Back_UART_TX+0x10>
 87e:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <callBack_tx+0x1>
 882:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <callBack_tx>
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	08 95       	ret
 88a:	85 e0       	ldi	r24, 0x05	; 5
 88c:	08 95       	ret

0000088e <__vector_13>:


 ISR(USART_RXC_vect)
 {
 88e:	1f 92       	push	r1
 890:	0f 92       	push	r0
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	0f 92       	push	r0
 896:	11 24       	eor	r1, r1
 898:	2f 93       	push	r18
 89a:	3f 93       	push	r19
 89c:	4f 93       	push	r20
 89e:	5f 93       	push	r21
 8a0:	6f 93       	push	r22
 8a2:	7f 93       	push	r23
 8a4:	8f 93       	push	r24
 8a6:	9f 93       	push	r25
 8a8:	af 93       	push	r26
 8aa:	bf 93       	push	r27
 8ac:	ef 93       	push	r30
 8ae:	ff 93       	push	r31
 	if(callBack_rx != NULL_PTR)
 8b0:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <callBack_rx>
 8b4:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <callBack_rx+0x1>
 8b8:	30 97       	sbiw	r30, 0x00	; 0
 8ba:	09 f0       	breq	.+2      	; 0x8be <__vector_13+0x30>
 	{
	 	callBack_rx();
 8bc:	09 95       	icall
 	}
 }
 8be:	ff 91       	pop	r31
 8c0:	ef 91       	pop	r30
 8c2:	bf 91       	pop	r27
 8c4:	af 91       	pop	r26
 8c6:	9f 91       	pop	r25
 8c8:	8f 91       	pop	r24
 8ca:	7f 91       	pop	r23
 8cc:	6f 91       	pop	r22
 8ce:	5f 91       	pop	r21
 8d0:	4f 91       	pop	r20
 8d2:	3f 91       	pop	r19
 8d4:	2f 91       	pop	r18
 8d6:	0f 90       	pop	r0
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	0f 90       	pop	r0
 8dc:	1f 90       	pop	r1
 8de:	18 95       	reti

000008e0 <__vector_15>:


 ISR(USART_TXC_vect)
 {
 8e0:	1f 92       	push	r1
 8e2:	0f 92       	push	r0
 8e4:	0f b6       	in	r0, 0x3f	; 63
 8e6:	0f 92       	push	r0
 8e8:	11 24       	eor	r1, r1
 8ea:	2f 93       	push	r18
 8ec:	3f 93       	push	r19
 8ee:	4f 93       	push	r20
 8f0:	5f 93       	push	r21
 8f2:	6f 93       	push	r22
 8f4:	7f 93       	push	r23
 8f6:	8f 93       	push	r24
 8f8:	9f 93       	push	r25
 8fa:	af 93       	push	r26
 8fc:	bf 93       	push	r27
 8fe:	ef 93       	push	r30
 900:	ff 93       	push	r31
	if(callBack_tx != NULL_PTR)
 902:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <callBack_tx>
 906:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <callBack_tx+0x1>
 90a:	30 97       	sbiw	r30, 0x00	; 0
 90c:	09 f0       	breq	.+2      	; 0x910 <__vector_15+0x30>
	{
		callBack_tx();
 90e:	09 95       	icall
	}

 910:	ff 91       	pop	r31
 912:	ef 91       	pop	r30
 914:	bf 91       	pop	r27
 916:	af 91       	pop	r26
 918:	9f 91       	pop	r25
 91a:	8f 91       	pop	r24
 91c:	7f 91       	pop	r23
 91e:	6f 91       	pop	r22
 920:	5f 91       	pop	r21
 922:	4f 91       	pop	r20
 924:	3f 91       	pop	r19
 926:	2f 91       	pop	r18
 928:	0f 90       	pop	r0
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	0f 90       	pop	r0
 92e:	1f 90       	pop	r1
 930:	18 95       	reti

00000932 <TIMER_vidInit>:



void TIMER_vidInit(void)
{
	CLEAR_BIT(TCCR0,7);///////
 932:	83 b7       	in	r24, 0x33	; 51
 934:	8f 77       	andi	r24, 0x7F	; 127
 936:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,6); // normal mode
 938:	83 b7       	in	r24, 0x33	; 51
 93a:	8f 7b       	andi	r24, 0xBF	; 191
 93c:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,3);
 93e:	83 b7       	in	r24, 0x33	; 51
 940:	87 7f       	andi	r24, 0xF7	; 247
 942:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,5); //Normal port operation, OC0 disconnected.
 944:	83 b7       	in	r24, 0x33	; 51
 946:	8f 7d       	andi	r24, 0xDF	; 223
 948:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,4);
 94a:	83 b7       	in	r24, 0x33	; 51
 94c:	8f 7e       	andi	r24, 0xEF	; 239
 94e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,2); //clk I/O (No prescaling)
 950:	83 b7       	in	r24, 0x33	; 51
 952:	84 60       	ori	r24, 0x04	; 4
 954:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,1);
 956:	83 b7       	in	r24, 0x33	; 51
 958:	8d 7f       	andi	r24, 0xFD	; 253
 95a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,0);
 95c:	83 b7       	in	r24, 0x33	; 51
 95e:	81 60       	ori	r24, 0x01	; 1
 960:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
 962:	12 be       	out	0x32, r1	; 50
	SET_BIT(TIMSK,0);
 964:	89 b7       	in	r24, 0x39	; 57
 966:	81 60       	ori	r24, 0x01	; 1
 968:	89 bf       	out	0x39, r24	; 57
	SET_BIT(SREG,7);
 96a:	8a b7       	in	r24, 0x3a	; 58
 96c:	80 68       	ori	r24, 0x80	; 128
 96e:	8a bf       	out	0x3a, r24	; 58
 970:	08 95       	ret

00000972 <__fixunssfsi>:
 972:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_splitA>
 976:	88 f0       	brcs	.+34     	; 0x99a <__fixunssfsi+0x28>
 978:	9f 57       	subi	r25, 0x7F	; 127
 97a:	98 f0       	brcs	.+38     	; 0x9a2 <__fixunssfsi+0x30>
 97c:	b9 2f       	mov	r27, r25
 97e:	99 27       	eor	r25, r25
 980:	b7 51       	subi	r27, 0x17	; 23
 982:	b0 f0       	brcs	.+44     	; 0x9b0 <__fixunssfsi+0x3e>
 984:	e1 f0       	breq	.+56     	; 0x9be <__fixunssfsi+0x4c>
 986:	66 0f       	add	r22, r22
 988:	77 1f       	adc	r23, r23
 98a:	88 1f       	adc	r24, r24
 98c:	99 1f       	adc	r25, r25
 98e:	1a f0       	brmi	.+6      	; 0x996 <__fixunssfsi+0x24>
 990:	ba 95       	dec	r27
 992:	c9 f7       	brne	.-14     	; 0x986 <__fixunssfsi+0x14>
 994:	14 c0       	rjmp	.+40     	; 0x9be <__fixunssfsi+0x4c>
 996:	b1 30       	cpi	r27, 0x01	; 1
 998:	91 f0       	breq	.+36     	; 0x9be <__fixunssfsi+0x4c>
 99a:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fp_zero>
 99e:	b1 e0       	ldi	r27, 0x01	; 1
 9a0:	08 95       	ret
 9a2:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_zero>
 9a6:	67 2f       	mov	r22, r23
 9a8:	78 2f       	mov	r23, r24
 9aa:	88 27       	eor	r24, r24
 9ac:	b8 5f       	subi	r27, 0xF8	; 248
 9ae:	39 f0       	breq	.+14     	; 0x9be <__fixunssfsi+0x4c>
 9b0:	b9 3f       	cpi	r27, 0xF9	; 249
 9b2:	cc f3       	brlt	.-14     	; 0x9a6 <__fixunssfsi+0x34>
 9b4:	86 95       	lsr	r24
 9b6:	77 95       	ror	r23
 9b8:	67 95       	ror	r22
 9ba:	b3 95       	inc	r27
 9bc:	d9 f7       	brne	.-10     	; 0x9b4 <__fixunssfsi+0x42>
 9be:	3e f4       	brtc	.+14     	; 0x9ce <__fixunssfsi+0x5c>
 9c0:	90 95       	com	r25
 9c2:	80 95       	com	r24
 9c4:	70 95       	com	r23
 9c6:	61 95       	neg	r22
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ca:	8f 4f       	sbci	r24, 0xFF	; 255
 9cc:	9f 4f       	sbci	r25, 0xFF	; 255
 9ce:	08 95       	ret

000009d0 <__floatunsisf>:
 9d0:	e8 94       	clt
 9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <__floatsisf+0x12>

000009d4 <__floatsisf>:
 9d4:	97 fb       	bst	r25, 7
 9d6:	3e f4       	brtc	.+14     	; 0x9e6 <__floatsisf+0x12>
 9d8:	90 95       	com	r25
 9da:	80 95       	com	r24
 9dc:	70 95       	com	r23
 9de:	61 95       	neg	r22
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	8f 4f       	sbci	r24, 0xFF	; 255
 9e4:	9f 4f       	sbci	r25, 0xFF	; 255
 9e6:	99 23       	and	r25, r25
 9e8:	a9 f0       	breq	.+42     	; 0xa14 <__floatsisf+0x40>
 9ea:	f9 2f       	mov	r31, r25
 9ec:	96 e9       	ldi	r25, 0x96	; 150
 9ee:	bb 27       	eor	r27, r27
 9f0:	93 95       	inc	r25
 9f2:	f6 95       	lsr	r31
 9f4:	87 95       	ror	r24
 9f6:	77 95       	ror	r23
 9f8:	67 95       	ror	r22
 9fa:	b7 95       	ror	r27
 9fc:	f1 11       	cpse	r31, r1
 9fe:	f8 cf       	rjmp	.-16     	; 0x9f0 <__floatsisf+0x1c>
 a00:	fa f4       	brpl	.+62     	; 0xa40 <__floatsisf+0x6c>
 a02:	bb 0f       	add	r27, r27
 a04:	11 f4       	brne	.+4      	; 0xa0a <__floatsisf+0x36>
 a06:	60 ff       	sbrs	r22, 0
 a08:	1b c0       	rjmp	.+54     	; 0xa40 <__floatsisf+0x6c>
 a0a:	6f 5f       	subi	r22, 0xFF	; 255
 a0c:	7f 4f       	sbci	r23, 0xFF	; 255
 a0e:	8f 4f       	sbci	r24, 0xFF	; 255
 a10:	9f 4f       	sbci	r25, 0xFF	; 255
 a12:	16 c0       	rjmp	.+44     	; 0xa40 <__floatsisf+0x6c>
 a14:	88 23       	and	r24, r24
 a16:	11 f0       	breq	.+4      	; 0xa1c <__floatsisf+0x48>
 a18:	96 e9       	ldi	r25, 0x96	; 150
 a1a:	11 c0       	rjmp	.+34     	; 0xa3e <__floatsisf+0x6a>
 a1c:	77 23       	and	r23, r23
 a1e:	21 f0       	breq	.+8      	; 0xa28 <__floatsisf+0x54>
 a20:	9e e8       	ldi	r25, 0x8E	; 142
 a22:	87 2f       	mov	r24, r23
 a24:	76 2f       	mov	r23, r22
 a26:	05 c0       	rjmp	.+10     	; 0xa32 <__floatsisf+0x5e>
 a28:	66 23       	and	r22, r22
 a2a:	71 f0       	breq	.+28     	; 0xa48 <__floatsisf+0x74>
 a2c:	96 e8       	ldi	r25, 0x86	; 134
 a2e:	86 2f       	mov	r24, r22
 a30:	70 e0       	ldi	r23, 0x00	; 0
 a32:	60 e0       	ldi	r22, 0x00	; 0
 a34:	2a f0       	brmi	.+10     	; 0xa40 <__floatsisf+0x6c>
 a36:	9a 95       	dec	r25
 a38:	66 0f       	add	r22, r22
 a3a:	77 1f       	adc	r23, r23
 a3c:	88 1f       	adc	r24, r24
 a3e:	da f7       	brpl	.-10     	; 0xa36 <__floatsisf+0x62>
 a40:	88 0f       	add	r24, r24
 a42:	96 95       	lsr	r25
 a44:	87 95       	ror	r24
 a46:	97 f9       	bld	r25, 7
 a48:	08 95       	ret

00000a4a <__fp_split3>:
 a4a:	57 fd       	sbrc	r21, 7
 a4c:	90 58       	subi	r25, 0x80	; 128
 a4e:	44 0f       	add	r20, r20
 a50:	55 1f       	adc	r21, r21
 a52:	59 f0       	breq	.+22     	; 0xa6a <__fp_splitA+0x10>
 a54:	5f 3f       	cpi	r21, 0xFF	; 255
 a56:	71 f0       	breq	.+28     	; 0xa74 <__fp_splitA+0x1a>
 a58:	47 95       	ror	r20

00000a5a <__fp_splitA>:
 a5a:	88 0f       	add	r24, r24
 a5c:	97 fb       	bst	r25, 7
 a5e:	99 1f       	adc	r25, r25
 a60:	61 f0       	breq	.+24     	; 0xa7a <__fp_splitA+0x20>
 a62:	9f 3f       	cpi	r25, 0xFF	; 255
 a64:	79 f0       	breq	.+30     	; 0xa84 <__fp_splitA+0x2a>
 a66:	87 95       	ror	r24
 a68:	08 95       	ret
 a6a:	12 16       	cp	r1, r18
 a6c:	13 06       	cpc	r1, r19
 a6e:	14 06       	cpc	r1, r20
 a70:	55 1f       	adc	r21, r21
 a72:	f2 cf       	rjmp	.-28     	; 0xa58 <__fp_split3+0xe>
 a74:	46 95       	lsr	r20
 a76:	f1 df       	rcall	.-30     	; 0xa5a <__fp_splitA>
 a78:	08 c0       	rjmp	.+16     	; 0xa8a <__fp_splitA+0x30>
 a7a:	16 16       	cp	r1, r22
 a7c:	17 06       	cpc	r1, r23
 a7e:	18 06       	cpc	r1, r24
 a80:	99 1f       	adc	r25, r25
 a82:	f1 cf       	rjmp	.-30     	; 0xa66 <__fp_splitA+0xc>
 a84:	86 95       	lsr	r24
 a86:	71 05       	cpc	r23, r1
 a88:	61 05       	cpc	r22, r1
 a8a:	08 94       	sec
 a8c:	08 95       	ret

00000a8e <__fp_zero>:
 a8e:	e8 94       	clt

00000a90 <__fp_szero>:
 a90:	bb 27       	eor	r27, r27
 a92:	66 27       	eor	r22, r22
 a94:	77 27       	eor	r23, r23
 a96:	cb 01       	movw	r24, r22
 a98:	97 f9       	bld	r25, 7
 a9a:	08 95       	ret

00000a9c <__mulsf3>:
 a9c:	0e 94 61 05 	call	0xac2	; 0xac2 <__mulsf3x>
 aa0:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__fp_round>
 aa4:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_pscA>
 aa8:	38 f0       	brcs	.+14     	; 0xab8 <__mulsf3+0x1c>
 aaa:	0e 94 cb 05 	call	0xb96	; 0xb96 <__fp_pscB>
 aae:	20 f0       	brcs	.+8      	; 0xab8 <__mulsf3+0x1c>
 ab0:	95 23       	and	r25, r21
 ab2:	11 f0       	breq	.+4      	; 0xab8 <__mulsf3+0x1c>
 ab4:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_inf>
 ab8:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_nan>
 abc:	11 24       	eor	r1, r1
 abe:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_szero>

00000ac2 <__mulsf3x>:
 ac2:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_split3>
 ac6:	70 f3       	brcs	.-36     	; 0xaa4 <__mulsf3+0x8>

00000ac8 <__mulsf3_pse>:
 ac8:	95 9f       	mul	r25, r21
 aca:	c1 f3       	breq	.-16     	; 0xabc <__mulsf3+0x20>
 acc:	95 0f       	add	r25, r21
 ace:	50 e0       	ldi	r21, 0x00	; 0
 ad0:	55 1f       	adc	r21, r21
 ad2:	62 9f       	mul	r22, r18
 ad4:	f0 01       	movw	r30, r0
 ad6:	72 9f       	mul	r23, r18
 ad8:	bb 27       	eor	r27, r27
 ada:	f0 0d       	add	r31, r0
 adc:	b1 1d       	adc	r27, r1
 ade:	63 9f       	mul	r22, r19
 ae0:	aa 27       	eor	r26, r26
 ae2:	f0 0d       	add	r31, r0
 ae4:	b1 1d       	adc	r27, r1
 ae6:	aa 1f       	adc	r26, r26
 ae8:	64 9f       	mul	r22, r20
 aea:	66 27       	eor	r22, r22
 aec:	b0 0d       	add	r27, r0
 aee:	a1 1d       	adc	r26, r1
 af0:	66 1f       	adc	r22, r22
 af2:	82 9f       	mul	r24, r18
 af4:	22 27       	eor	r18, r18
 af6:	b0 0d       	add	r27, r0
 af8:	a1 1d       	adc	r26, r1
 afa:	62 1f       	adc	r22, r18
 afc:	73 9f       	mul	r23, r19
 afe:	b0 0d       	add	r27, r0
 b00:	a1 1d       	adc	r26, r1
 b02:	62 1f       	adc	r22, r18
 b04:	83 9f       	mul	r24, r19
 b06:	a0 0d       	add	r26, r0
 b08:	61 1d       	adc	r22, r1
 b0a:	22 1f       	adc	r18, r18
 b0c:	74 9f       	mul	r23, r20
 b0e:	33 27       	eor	r19, r19
 b10:	a0 0d       	add	r26, r0
 b12:	61 1d       	adc	r22, r1
 b14:	23 1f       	adc	r18, r19
 b16:	84 9f       	mul	r24, r20
 b18:	60 0d       	add	r22, r0
 b1a:	21 1d       	adc	r18, r1
 b1c:	82 2f       	mov	r24, r18
 b1e:	76 2f       	mov	r23, r22
 b20:	6a 2f       	mov	r22, r26
 b22:	11 24       	eor	r1, r1
 b24:	9f 57       	subi	r25, 0x7F	; 127
 b26:	50 40       	sbci	r21, 0x00	; 0
 b28:	9a f0       	brmi	.+38     	; 0xb50 <__mulsf3_pse+0x88>
 b2a:	f1 f0       	breq	.+60     	; 0xb68 <__mulsf3_pse+0xa0>
 b2c:	88 23       	and	r24, r24
 b2e:	4a f0       	brmi	.+18     	; 0xb42 <__mulsf3_pse+0x7a>
 b30:	ee 0f       	add	r30, r30
 b32:	ff 1f       	adc	r31, r31
 b34:	bb 1f       	adc	r27, r27
 b36:	66 1f       	adc	r22, r22
 b38:	77 1f       	adc	r23, r23
 b3a:	88 1f       	adc	r24, r24
 b3c:	91 50       	subi	r25, 0x01	; 1
 b3e:	50 40       	sbci	r21, 0x00	; 0
 b40:	a9 f7       	brne	.-22     	; 0xb2c <__mulsf3_pse+0x64>
 b42:	9e 3f       	cpi	r25, 0xFE	; 254
 b44:	51 05       	cpc	r21, r1
 b46:	80 f0       	brcs	.+32     	; 0xb68 <__mulsf3_pse+0xa0>
 b48:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_inf>
 b4c:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_szero>
 b50:	5f 3f       	cpi	r21, 0xFF	; 255
 b52:	e4 f3       	brlt	.-8      	; 0xb4c <__mulsf3_pse+0x84>
 b54:	98 3e       	cpi	r25, 0xE8	; 232
 b56:	d4 f3       	brlt	.-12     	; 0xb4c <__mulsf3_pse+0x84>
 b58:	86 95       	lsr	r24
 b5a:	77 95       	ror	r23
 b5c:	67 95       	ror	r22
 b5e:	b7 95       	ror	r27
 b60:	f7 95       	ror	r31
 b62:	e7 95       	ror	r30
 b64:	9f 5f       	subi	r25, 0xFF	; 255
 b66:	c1 f7       	brne	.-16     	; 0xb58 <__mulsf3_pse+0x90>
 b68:	fe 2b       	or	r31, r30
 b6a:	88 0f       	add	r24, r24
 b6c:	91 1d       	adc	r25, r1
 b6e:	96 95       	lsr	r25
 b70:	87 95       	ror	r24
 b72:	97 f9       	bld	r25, 7
 b74:	08 95       	ret

00000b76 <__fp_inf>:
 b76:	97 f9       	bld	r25, 7
 b78:	9f 67       	ori	r25, 0x7F	; 127
 b7a:	80 e8       	ldi	r24, 0x80	; 128
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	60 e0       	ldi	r22, 0x00	; 0
 b80:	08 95       	ret

00000b82 <__fp_nan>:
 b82:	9f ef       	ldi	r25, 0xFF	; 255
 b84:	80 ec       	ldi	r24, 0xC0	; 192
 b86:	08 95       	ret

00000b88 <__fp_pscA>:
 b88:	00 24       	eor	r0, r0
 b8a:	0a 94       	dec	r0
 b8c:	16 16       	cp	r1, r22
 b8e:	17 06       	cpc	r1, r23
 b90:	18 06       	cpc	r1, r24
 b92:	09 06       	cpc	r0, r25
 b94:	08 95       	ret

00000b96 <__fp_pscB>:
 b96:	00 24       	eor	r0, r0
 b98:	0a 94       	dec	r0
 b9a:	12 16       	cp	r1, r18
 b9c:	13 06       	cpc	r1, r19
 b9e:	14 06       	cpc	r1, r20
 ba0:	05 06       	cpc	r0, r21
 ba2:	08 95       	ret

00000ba4 <__fp_round>:
 ba4:	09 2e       	mov	r0, r25
 ba6:	03 94       	inc	r0
 ba8:	00 0c       	add	r0, r0
 baa:	11 f4       	brne	.+4      	; 0xbb0 <__fp_round+0xc>
 bac:	88 23       	and	r24, r24
 bae:	52 f0       	brmi	.+20     	; 0xbc4 <__fp_round+0x20>
 bb0:	bb 0f       	add	r27, r27
 bb2:	40 f4       	brcc	.+16     	; 0xbc4 <__fp_round+0x20>
 bb4:	bf 2b       	or	r27, r31
 bb6:	11 f4       	brne	.+4      	; 0xbbc <__fp_round+0x18>
 bb8:	60 ff       	sbrs	r22, 0
 bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__fp_round+0x20>
 bbc:	6f 5f       	subi	r22, 0xFF	; 255
 bbe:	7f 4f       	sbci	r23, 0xFF	; 255
 bc0:	8f 4f       	sbci	r24, 0xFF	; 255
 bc2:	9f 4f       	sbci	r25, 0xFF	; 255
 bc4:	08 95       	ret

00000bc6 <_exit>:
 bc6:	f8 94       	cli

00000bc8 <__stop_program>:
 bc8:	ff cf       	rjmp	.-2      	; 0xbc8 <__stop_program>
